
Jun_SPI_Tem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003f64  08003f64  00004f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800400c  0800400c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800400c  0800400c  0000500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004014  08004014  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004014  08004014  00005014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800401c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08004084  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004084  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f89  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c2  00000000  00000000  00010021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  000119e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072b  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022100  00000000  00000000  00012a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b81b  00000000  00000000  00034b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf2f  00000000  00000000  0004038e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c2bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e48  00000000  00000000  0010c300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f4c 	.word	0x08003f4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003f4c 	.word	0x08003f4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <HAL_UART_Send_Temp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Send formatted temperature over UART
void HAL_UART_Send_Temp(uint16_t temp)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
    char buffer[50];
    snprintf(buffer, sizeof(buffer), "Temperature is: %d C\r\n", temp);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f107 000c 	add.w	r0, r7, #12
 80005fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <HAL_UART_Send_Temp+0x3c>)
 80005fe:	2132      	movs	r1, #50	@ 0x32
 8000600:	f002 fda0 	bl	8003144 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe01 	bl	8000210 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f107 010c 	add.w	r1, r7, #12
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	4804      	ldr	r0, [pc, #16]	@ (800062c <HAL_UART_Send_Temp+0x40>)
 800061c:	f002 f8b6 	bl	800278c <HAL_UART_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3740      	adds	r7, #64	@ 0x40
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08003f64 	.word	0x08003f64
 800062c:	200000dc 	.word	0x200000dc

08000630 <MAX6675_Read_Temp>:

// Read temperature from MAX6675 sensor via SPI
uint16_t MAX6675_Read_Temp(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
    uint8_t spi_buf[2];
    uint16_t temp_raw = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	80fb      	strh	r3, [r7, #6]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	481d      	ldr	r0, [pc, #116]	@ (80006b4 <MAX6675_Read_Temp+0x84>)
 8000640:	f000 fe4a 	bl	80012d8 <HAL_GPIO_WritePin>

    for (volatile int i = 0; i < 100; i++);  // ~1us delay
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	e002      	b.n	8000650 <MAX6675_Read_Temp+0x20>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b63      	cmp	r3, #99	@ 0x63
 8000654:	ddf9      	ble.n	800064a <MAX6675_Read_Temp+0x1a>

    if (HAL_SPI_Receive(&hspi1, spi_buf, 2, 100) != HAL_OK)
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	2364      	movs	r3, #100	@ 0x64
 800065a:	2202      	movs	r2, #2
 800065c:	4816      	ldr	r0, [pc, #88]	@ (80006b8 <MAX6675_Read_Temp+0x88>)
 800065e:	f001 fc40 	bl	8001ee2 <HAL_SPI_Receive>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d007      	beq.n	8000678 <MAX6675_Read_Temp+0x48>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2110      	movs	r1, #16
 800066c:	4811      	ldr	r0, [pc, #68]	@ (80006b4 <MAX6675_Read_Temp+0x84>)
 800066e:	f000 fe33 	bl	80012d8 <HAL_GPIO_WritePin>
        return 0xFFFF;  // SPI error
 8000672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000676:	e019      	b.n	80006ac <MAX6675_Read_Temp+0x7c>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2110      	movs	r1, #16
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <MAX6675_Read_Temp+0x84>)
 800067e:	f000 fe2b 	bl	80012d8 <HAL_GPIO_WritePin>

    temp_raw = (spi_buf[0] << 8) | spi_buf[1];
 8000682:	793b      	ldrb	r3, [r7, #4]
 8000684:	b21b      	sxth	r3, r3
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	797b      	ldrb	r3, [r7, #5]
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21b      	sxth	r3, r3
 8000692:	80fb      	strh	r3, [r7, #6]

    if (temp_raw == 0xFFFE)
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800069a:	4293      	cmp	r3, r2
 800069c:	d102      	bne.n	80006a4 <MAX6675_Read_Temp+0x74>
        printf("Thermocouple Disconnected\r\n");
 800069e:	4807      	ldr	r0, [pc, #28]	@ (80006bc <MAX6675_Read_Temp+0x8c>)
 80006a0:	f002 fd48 	bl	8003134 <puts>

    temp_raw >>= 3;  // Remove lower 3 bits
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	80fb      	strh	r3, [r7, #6]
    return temp_raw;
 80006aa:	88fb      	ldrh	r3, [r7, #6]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020000 	.word	0x40020000
 80006b8:	20000084 	.word	0x20000084
 80006bc:	08003f7c 	.word	0x08003f7c

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 faf7 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f837 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f8f5 	bl	80008bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80006d2:	f000 f893 	bl	80007fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 f8c7 	bl	8000868 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t temp_raw = MAX6675_Read_Temp();
 80006da:	f7ff ffa9 	bl	8000630 <MAX6675_Read_Temp>
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]

	    if (temp_raw == 0xFFFF)
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d107      	bne.n	80006fc <main+0x3c>
	    {
	        HAL_UART_Transmit(&huart2, (uint8_t *)"SPI Error\r\n", 11, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	220b      	movs	r2, #11
 80006f2:	490f      	ldr	r1, [pc, #60]	@ (8000730 <main+0x70>)
 80006f4:	480f      	ldr	r0, [pc, #60]	@ (8000734 <main+0x74>)
 80006f6:	f002 f849 	bl	800278c <HAL_UART_Transmit>
 80006fa:	e013      	b.n	8000724 <main+0x64>
	    }
	    else if (temp_raw == 0xFFFE)
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000702:	4293      	cmp	r3, r2
 8000704:	d107      	bne.n	8000716 <main+0x56>
	    {
	        HAL_UART_Transmit(&huart2, (uint8_t *)"Thermocouple Disconnected\r\n", 28, HAL_MAX_DELAY);
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	221c      	movs	r2, #28
 800070c:	490a      	ldr	r1, [pc, #40]	@ (8000738 <main+0x78>)
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <main+0x74>)
 8000710:	f002 f83c 	bl	800278c <HAL_UART_Transmit>
 8000714:	e006      	b.n	8000724 <main+0x64>
	    }
	    else
	    {
	        uint16_t temp_celsius = temp_raw / 4;  // convert from 0.25°C steps
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	089b      	lsrs	r3, r3, #2
 800071a:	80bb      	strh	r3, [r7, #4]
	        HAL_UART_Send_Temp(temp_celsius);
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff64 	bl	80005ec <HAL_UART_Send_Temp>
	    }

	    HAL_Delay(1000); // Wait 1 second between readings
 8000724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000728:	f000 fb38 	bl	8000d9c <HAL_Delay>
  {
 800072c:	e7d5      	b.n	80006da <main+0x1a>
 800072e:	bf00      	nop
 8000730:	08003f98 	.word	0x08003f98
 8000734:	200000dc 	.word	0x200000dc
 8000738:	08003fa4 	.word	0x08003fa4

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	@ 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fe08 	bl	8003360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <SystemClock_Config+0xb8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a22      	ldr	r2, [pc, #136]	@ (80007f4 <SystemClock_Config+0xb8>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <SystemClock_Config+0xb8>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemClock_Config+0xbc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000788:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <SystemClock_Config+0xbc>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <SystemClock_Config+0xbc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f86f 	bl	8001894 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007bc:	f000 f8b0 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fd96 	bl	800130c <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007e6:	f000 f89b 	bl	8000920 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	@ 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000830:	2230      	movs	r2, #48	@ 0x30
 8000832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000848:	220a      	movs	r2, #10
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_SPI1_Init+0x64>)
 800084e:	f001 fabf 	bl	8001dd0 <HAL_SPI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000858:	f000 f862 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000084 	.word	0x20000084
 8000864:	40013000 	.word	0x40013000

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f001 ff24 	bl	80026ec <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f839 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000dc 	.word	0x200000dc
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_GPIO_Init+0x5c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000918 <MX_GPIO_Init+0x5c>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <MX_GPIO_Init+0x5c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2110      	movs	r1, #16
 80008f0:	480a      	ldr	r0, [pc, #40]	@ (800091c <MX_GPIO_Init+0x60>)
 80008f2:	f000 fcf1 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008f6:	2310      	movs	r3, #16
 80008f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_GPIO_Init+0x60>)
 800090c:	f000 fb50 	bl	8000fb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <HAL_SPI_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12b      	bne.n	80009f6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009d6:	23e0      	movs	r3, #224	@ 0xe0
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e6:	2305      	movs	r3, #5
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <HAL_SPI_MspInit+0x8c>)
 80009f2:	f000 fadd 	bl	8000fb0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40013000 	.word	0x40013000
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a82:	f000 fa95 	bl	8000fb0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af2:	f000 f933 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e00a      	b.n	8000b22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0c:	f3af 8000 	nop.w
 8000b10:	4601      	mov	r1, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	b2ca      	uxtb	r2, r1
 8000b1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbf0      	blt.n	8000b0c <_read+0x12>
  }

  return len;
 8000b2a:	687b      	ldr	r3, [r7, #4]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e009      	b.n	8000b5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	60ba      	str	r2, [r7, #8]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3301      	adds	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	dbf1      	blt.n	8000b46 <_write+0x12>
  }
  return len;
 8000b62:	687b      	ldr	r3, [r7, #4]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_close>:

int _close(int file)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b94:	605a      	str	r2, [r3, #4]
  return 0;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_isatty>:

int _isatty(int file)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bac:	2301      	movs	r3, #1
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f002 fbfa 	bl	80033fc <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	20000124 	.word	0x20000124
 8000c3c:	20000278 	.word	0x20000278

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c68:	f7ff ffea 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f002 fbb9 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fd13 	bl	80006c0 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca8:	0800401c 	.word	0x0800401c
  ldr r2, =_sbss
 8000cac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb0:	20000278 	.word	0x20000278

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f931 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe1e 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f93b 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f911 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000128 	.word	0x20000128

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000128 	.word	0x20000128

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	@ (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	@ 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff47 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff5c 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffb0 	bl	8000f04 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e165      	b.n	8001298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8154 	bne.w	8001292 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80ae 	beq.w	8001292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b5d      	ldr	r3, [pc, #372]	@ (80012b0 <HAL_GPIO_Init+0x300>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a5c      	ldr	r2, [pc, #368]	@ (80012b0 <HAL_GPIO_Init+0x300>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b5a      	ldr	r3, [pc, #360]	@ (80012b0 <HAL_GPIO_Init+0x300>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a58      	ldr	r2, [pc, #352]	@ (80012b4 <HAL_GPIO_Init+0x304>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4f      	ldr	r2, [pc, #316]	@ (80012b8 <HAL_GPIO_Init+0x308>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4e      	ldr	r2, [pc, #312]	@ (80012bc <HAL_GPIO_Init+0x30c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x216>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4d      	ldr	r2, [pc, #308]	@ (80012c0 <HAL_GPIO_Init+0x310>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x212>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4c      	ldr	r2, [pc, #304]	@ (80012c4 <HAL_GPIO_Init+0x314>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x20e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4b      	ldr	r2, [pc, #300]	@ (80012c8 <HAL_GPIO_Init+0x318>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x20a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <HAL_GPIO_Init+0x31c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x206>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a49      	ldr	r2, [pc, #292]	@ (80012d0 <HAL_GPIO_Init+0x320>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x202>
 80011ae:	2306      	movs	r3, #6
 80011b0:	e00c      	b.n	80011cc <HAL_GPIO_Init+0x21c>
 80011b2:	2307      	movs	r3, #7
 80011b4:	e00a      	b.n	80011cc <HAL_GPIO_Init+0x21c>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x21c>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x21c>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x21c>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x21c>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x21c>
 80011ca:	2300      	movs	r3, #0
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	f002 0203 	and.w	r2, r2, #3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	@ (80012b4 <HAL_GPIO_Init+0x304>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a31      	ldr	r2, [pc, #196]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a26      	ldr	r2, [pc, #152]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123e:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128c:	4a11      	ldr	r2, [pc, #68]	@ (80012d4 <HAL_GPIO_Init+0x324>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	f67f ae96 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0cc      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001320:	4b68      	ldr	r3, [pc, #416]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d90c      	bls.n	8001348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132e:	4b65      	ldr	r3, [pc, #404]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0b8      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001360:	4b59      	ldr	r3, [pc, #356]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a58      	ldr	r2, [pc, #352]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800136a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a52      	ldr	r2, [pc, #328]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001384:	4b50      	ldr	r3, [pc, #320]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	494d      	ldr	r1, [pc, #308]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d044      	beq.n	800142c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d119      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e07f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	4b3f      	ldr	r3, [pc, #252]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e06f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e067      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 0203 	bic.w	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4934      	ldr	r1, [pc, #208]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013fc:	f7ff fcc2 	bl	8000d84 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	e00a      	b.n	800141a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f7ff fcbe 	bl	8000d84 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e04f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141a:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 020c 	and.w	r2, r3, #12
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	429a      	cmp	r2, r3
 800142a:	d1eb      	bne.n	8001404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800142c:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d20c      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e032      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4916      	ldr	r1, [pc, #88]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	490e      	ldr	r1, [pc, #56]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001492:	f000 f855 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 8001496:	4602      	mov	r2, r0
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	490a      	ldr	r1, [pc, #40]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	5ccb      	ldrb	r3, [r1, r3]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fc22 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00
 80014c8:	40023800 	.word	0x40023800
 80014cc:	08003fc0 	.word	0x08003fc0
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_RCC_GetHCLKFreq+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f4:	f7ff fff0 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	0a9b      	lsrs	r3, r3, #10
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	4903      	ldr	r1, [pc, #12]	@ (8001514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	08003fd0 	.word	0x08003fd0

08001518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800151c:	f7ff ffdc 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	0b5b      	lsrs	r3, r3, #13
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4903      	ldr	r1, [pc, #12]	@ (800153c <HAL_RCC_GetPCLK2Freq+0x24>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	08003fd0 	.word	0x08003fd0

08001540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001544:	b0a6      	sub	sp, #152	@ 0x98
 8001546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001566:	4bc8      	ldr	r3, [pc, #800]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b0c      	cmp	r3, #12
 8001570:	f200 817e 	bhi.w	8001870 <HAL_RCC_GetSysClockFreq+0x330>
 8001574:	a201      	add	r2, pc, #4	@ (adr r2, 800157c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	080015b1 	.word	0x080015b1
 8001580:	08001871 	.word	0x08001871
 8001584:	08001871 	.word	0x08001871
 8001588:	08001871 	.word	0x08001871
 800158c:	080015b9 	.word	0x080015b9
 8001590:	08001871 	.word	0x08001871
 8001594:	08001871 	.word	0x08001871
 8001598:	08001871 	.word	0x08001871
 800159c:	080015c1 	.word	0x080015c1
 80015a0:	08001871 	.word	0x08001871
 80015a4:	08001871 	.word	0x08001871
 80015a8:	08001871 	.word	0x08001871
 80015ac:	0800172b 	.word	0x0800172b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4bb6      	ldr	r3, [pc, #728]	@ (800188c <HAL_RCC_GetSysClockFreq+0x34c>)
 80015b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015b6:	e15f      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x350>)
 80015ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015be:	e15b      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c0:	4bb1      	ldr	r3, [pc, #708]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015cc:	4bae      	ldr	r3, [pc, #696]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d031      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d8:	4bab      	ldr	r3, [pc, #684]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	2200      	movs	r2, #0
 80015e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80015ec:	2300      	movs	r3, #0
 80015ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80015f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x350>)
 80015f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015f6:	462a      	mov	r2, r5
 80015f8:	fb03 f202 	mul.w	r2, r3, r2
 80015fc:	2300      	movs	r3, #0
 80015fe:	4621      	mov	r1, r4
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	4aa2      	ldr	r2, [pc, #648]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x350>)
 8001608:	4621      	mov	r1, r4
 800160a:	fba1 1202 	umull	r1, r2, r1, r2
 800160e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001610:	460a      	mov	r2, r1
 8001612:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001614:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001616:	4413      	add	r3, r2
 8001618:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800161a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800161e:	2200      	movs	r2, #0
 8001620:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001622:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001624:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001628:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800162c:	f7fe fe48 	bl	80002c0 <__aeabi_uldivmod>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4613      	mov	r3, r2
 8001636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800163a:	e064      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163c:	4b92      	ldr	r3, [pc, #584]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	2200      	movs	r2, #0
 8001644:	653b      	str	r3, [r7, #80]	@ 0x50
 8001646:	657a      	str	r2, [r7, #84]	@ 0x54
 8001648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800164a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800164e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001650:	2300      	movs	r3, #0
 8001652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001654:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001658:	4622      	mov	r2, r4
 800165a:	462b      	mov	r3, r5
 800165c:	f04f 0000 	mov.w	r0, #0
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	0159      	lsls	r1, r3, #5
 8001666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800166a:	0150      	lsls	r0, r2, #5
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4621      	mov	r1, r4
 8001672:	1a51      	subs	r1, r2, r1
 8001674:	6139      	str	r1, [r7, #16]
 8001676:	4629      	mov	r1, r5
 8001678:	eb63 0301 	sbc.w	r3, r3, r1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800168a:	4659      	mov	r1, fp
 800168c:	018b      	lsls	r3, r1, #6
 800168e:	4651      	mov	r1, sl
 8001690:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001694:	4651      	mov	r1, sl
 8001696:	018a      	lsls	r2, r1, #6
 8001698:	4651      	mov	r1, sl
 800169a:	ebb2 0801 	subs.w	r8, r2, r1
 800169e:	4659      	mov	r1, fp
 80016a0:	eb63 0901 	sbc.w	r9, r3, r1
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b8:	4690      	mov	r8, r2
 80016ba:	4699      	mov	r9, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	eb18 0303 	adds.w	r3, r8, r3
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	462b      	mov	r3, r5
 80016c6:	eb49 0303 	adc.w	r3, r9, r3
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016d8:	4629      	mov	r1, r5
 80016da:	028b      	lsls	r3, r1, #10
 80016dc:	4621      	mov	r1, r4
 80016de:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e2:	4621      	mov	r1, r4
 80016e4:	028a      	lsls	r2, r1, #10
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016ee:	2200      	movs	r2, #0
 80016f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80016f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80016f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80016f8:	f7fe fde2 	bl	80002c0 <__aeabi_uldivmod>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4613      	mov	r3, r2
 8001702:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001706:	4b60      	ldr	r3, [pc, #384]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	0c1b      	lsrs	r3, r3, #16
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	3301      	adds	r3, #1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001718:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800171c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001728:	e0a6      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172a:	4b57      	ldr	r3, [pc, #348]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001736:	4b54      	ldr	r3, [pc, #336]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d02a      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001742:	4b51      	ldr	r3, [pc, #324]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	2200      	movs	r2, #0
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800174c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800174e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001750:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001754:	2100      	movs	r1, #0
 8001756:	4b4e      	ldr	r3, [pc, #312]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x350>)
 8001758:	fb03 f201 	mul.w	r2, r3, r1
 800175c:	2300      	movs	r3, #0
 800175e:	fb00 f303 	mul.w	r3, r0, r3
 8001762:	4413      	add	r3, r2
 8001764:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x350>)
 8001766:	fba0 1202 	umull	r1, r2, r0, r2
 800176a:	677a      	str	r2, [r7, #116]	@ 0x74
 800176c:	460a      	mov	r2, r1
 800176e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001770:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001772:	4413      	add	r3, r2
 8001774:	677b      	str	r3, [r7, #116]	@ 0x74
 8001776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800177a:	2200      	movs	r2, #0
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
 800177e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001780:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001784:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001788:	f7fe fd9a 	bl	80002c0 <__aeabi_uldivmod>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4613      	mov	r3, r2
 8001792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001796:	e05b      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001798:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	2200      	movs	r2, #0
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017aa:	623b      	str	r3, [r7, #32]
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017b4:	4642      	mov	r2, r8
 80017b6:	464b      	mov	r3, r9
 80017b8:	f04f 0000 	mov.w	r0, #0
 80017bc:	f04f 0100 	mov.w	r1, #0
 80017c0:	0159      	lsls	r1, r3, #5
 80017c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c6:	0150      	lsls	r0, r2, #5
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4641      	mov	r1, r8
 80017ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80017d2:	4649      	mov	r1, r9
 80017d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017ec:	ebb2 040a 	subs.w	r4, r2, sl
 80017f0:	eb63 050b 	sbc.w	r5, r3, fp
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	00eb      	lsls	r3, r5, #3
 80017fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001802:	00e2      	lsls	r2, r4, #3
 8001804:	4614      	mov	r4, r2
 8001806:	461d      	mov	r5, r3
 8001808:	4643      	mov	r3, r8
 800180a:	18e3      	adds	r3, r4, r3
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	464b      	mov	r3, r9
 8001810:	eb45 0303 	adc.w	r3, r5, r3
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001822:	4629      	mov	r1, r5
 8001824:	028b      	lsls	r3, r1, #10
 8001826:	4621      	mov	r1, r4
 8001828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800182c:	4621      	mov	r1, r4
 800182e:	028a      	lsls	r2, r1, #10
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001838:	2200      	movs	r2, #0
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	61fa      	str	r2, [r7, #28]
 800183e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001842:	f7fe fd3d 	bl	80002c0 <__aeabi_uldivmod>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4613      	mov	r3, r2
 800184c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001850:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x348>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	0f1b      	lsrs	r3, r3, #28
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800185e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001862:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800186e:	e003      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001876:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001878:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800187c:	4618      	mov	r0, r3
 800187e:	3798      	adds	r7, #152	@ 0x98
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	00f42400 	.word	0x00f42400
 8001890:	017d7840 	.word	0x017d7840

08001894 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e28d      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8083 	beq.w	80019ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018b4:	4b94      	ldr	r3, [pc, #592]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d019      	beq.n	80018f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018c0:	4b91      	ldr	r3, [pc, #580]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018d8:	d00c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	4b8b      	ldr	r3, [pc, #556]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d112      	bne.n	800190c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e6:	4b88      	ldr	r3, [pc, #544]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018f2:	d10b      	bne.n	800190c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	4b84      	ldr	r3, [pc, #528]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d05b      	beq.n	80019b8 <HAL_RCC_OscConfig+0x124>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d157      	bne.n	80019b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e25a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001914:	d106      	bne.n	8001924 <HAL_RCC_OscConfig+0x90>
 8001916:	4b7c      	ldr	r3, [pc, #496]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a7b      	ldr	r2, [pc, #492]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e01d      	b.n	8001960 <HAL_RCC_OscConfig+0xcc>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0xb4>
 800192e:	4b76      	ldr	r3, [pc, #472]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a75      	ldr	r2, [pc, #468]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b73      	ldr	r3, [pc, #460]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a72      	ldr	r2, [pc, #456]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xcc>
 8001948:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 800194e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b6c      	ldr	r3, [pc, #432]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6b      	ldr	r2, [pc, #428]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800195e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fa0c 	bl	8000d84 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fa08 	bl	8000d84 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	@ 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e21f      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b61      	ldr	r3, [pc, #388]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0xdc>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f9f8 	bl	8000d84 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff f9f4 	bl	8000d84 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e20b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	4b57      	ldr	r3, [pc, #348]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x104>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d06f      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019c6:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d017      	beq.n	8001a02 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d105      	bne.n	80019ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019de:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d11c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f6:	4b44      	ldr	r3, [pc, #272]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d116      	bne.n	8001a30 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x186>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1d3      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4937      	ldr	r1, [pc, #220]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	e03a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a38:	4b34      	ldr	r3, [pc, #208]	@ (8001b0c <HAL_RCC_OscConfig+0x278>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f9a1 	bl	8000d84 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f99d 	bl	8000d84 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1b4      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b28      	ldr	r3, [pc, #160]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4925      	ldr	r1, [pc, #148]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
 8001a78:	e015      	b.n	8001aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_RCC_OscConfig+0x278>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff f980 	bl	8000d84 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff f97c 	bl	8000d84 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e193      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d036      	beq.n	8001b20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d016      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f960 	bl	8000d84 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f95c 	bl	8000d84 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e173      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_OscConfig+0x274>)
 8001adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x234>
 8001ae6:	e01b      	b.n	8001b20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff f949 	bl	8000d84 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af4:	e00e      	b.n	8001b14 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff f945 	bl	8000d84 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d907      	bls.n	8001b14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e15c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	42470000 	.word	0x42470000
 8001b10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	4b8a      	ldr	r3, [pc, #552]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ea      	bne.n	8001af6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8097 	beq.w	8001c5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b83      	ldr	r3, [pc, #524]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10f      	bne.n	8001b5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a7e      	ldr	r2, [pc, #504]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b79      	ldr	r3, [pc, #484]	@ (8001d44 <HAL_RCC_OscConfig+0x4b0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d118      	bne.n	8001b9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6a:	4b76      	ldr	r3, [pc, #472]	@ (8001d44 <HAL_RCC_OscConfig+0x4b0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a75      	ldr	r2, [pc, #468]	@ (8001d44 <HAL_RCC_OscConfig+0x4b0>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b76:	f7ff f905 	bl	8000d84 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7e:	f7ff f901 	bl	8000d84 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e118      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	4b6c      	ldr	r3, [pc, #432]	@ (8001d44 <HAL_RCC_OscConfig+0x4b0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x31e>
 8001ba4:	4b66      	ldr	r3, [pc, #408]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a65      	ldr	r2, [pc, #404]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x358>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x340>
 8001bba:	4b61      	ldr	r3, [pc, #388]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	4a60      	ldr	r2, [pc, #384]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	4a5d      	ldr	r2, [pc, #372]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0x358>
 8001bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a59      	ldr	r2, [pc, #356]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be0:	4b57      	ldr	r3, [pc, #348]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be4:	4a56      	ldr	r2, [pc, #344]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	f023 0304 	bic.w	r3, r3, #4
 8001bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d015      	beq.n	8001c20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f8c6 	bl	8000d84 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f8c2 	bl	8000d84 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0d7      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c12:	4b4b      	ldr	r3, [pc, #300]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0ee      	beq.n	8001bfc <HAL_RCC_OscConfig+0x368>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f8b0 	bl	8000d84 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f8ac 	bl	8000d84 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e0c1      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3e:	4b40      	ldr	r3, [pc, #256]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ee      	bne.n	8001c28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b3b      	ldr	r3, [pc, #236]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	4a3a      	ldr	r2, [pc, #232]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80ad 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c66:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d060      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d145      	bne.n	8001d06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <HAL_RCC_OscConfig+0x4b4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f880 	bl	8000d84 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f87c 	bl	8000d84 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e093      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69da      	ldr	r2, [r3, #28]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbc:	085b      	lsrs	r3, r3, #1
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	071b      	lsls	r3, r3, #28
 8001cd2:	491b      	ldr	r1, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x4b4>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f851 	bl	8000d84 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff f84d 	bl	8000d84 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e064      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x452>
 8001d04:	e05c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_RCC_OscConfig+0x4b4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f83a 	bl	8000d84 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff f836 	bl	8000d84 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e04d      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x480>
 8001d32:	e045      	b.n	8001dc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e040      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000
 8001d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <HAL_RCC_OscConfig+0x538>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d030      	beq.n	8001dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d129      	bne.n	8001dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d122      	bne.n	8001dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d119      	bne.n	8001dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	3b01      	subs	r3, #1
 8001d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10f      	bne.n	8001dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07b      	b.n	8001eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001df2:	d009      	beq.n	8001e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
 8001dfa:	e005      	b.n	8001e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fdaa 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8c:	ea42 0103 	orr.w	r1, r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0104 	and.w	r1, r3, #4
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	f003 0210 	and.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b088      	sub	sp, #32
 8001ee6:	af02      	add	r7, sp, #8
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	e104      	b.n	800210c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_SPI_Receive+0x2c>
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0fc      	b.n	800210c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f1a:	d112      	bne.n	8001f42 <HAL_SPI_Receive+0x60>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10e      	bne.n	8001f42 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2204      	movs	r2, #4
 8001f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f2c:	88fa      	ldrh	r2, [r7, #6]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f8eb 	bl	8002114 <HAL_SPI_TransmitReceive>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	e0e4      	b.n	800210c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f42:	f7fe ff1f 	bl	8000d84 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_SPI_Receive+0x74>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e0da      	b.n	800210c <HAL_SPI_Receive+0x22a>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2204      	movs	r2, #4
 8001f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	88fa      	ldrh	r2, [r7, #6]
 8001f76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd0:	2b40      	cmp	r3, #64	@ 0x40
 8001fd2:	d007      	beq.n	8001fe4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d170      	bne.n	80020ce <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001fec:	e035      	b.n	800205a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d115      	bne.n	8002028 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f103 020c 	add.w	r2, r3, #12
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002026:	e018      	b.n	800205a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002028:	f7fe feac 	bl	8000d84 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d803      	bhi.n	8002040 <HAL_SPI_Receive+0x15e>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d102      	bne.n	8002046 <HAL_SPI_Receive+0x164>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e058      	b.n	800210c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1c4      	bne.n	8001fee <HAL_SPI_Receive+0x10c>
 8002064:	e038      	b.n	80020d8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d113      	bne.n	800209c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207e:	b292      	uxth	r2, r2
 8002080:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002086:	1c9a      	adds	r2, r3, #2
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800209a:	e018      	b.n	80020ce <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800209c:	f7fe fe72 	bl	8000d84 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d803      	bhi.n	80020b4 <HAL_SPI_Receive+0x1d2>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d102      	bne.n	80020ba <HAL_SPI_Receive+0x1d8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e01e      	b.n	800210c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1c6      	bne.n	8002066 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 fa4b 	bl	8002578 <SPI_EndRxTransaction>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800210a:	2300      	movs	r3, #0
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002122:	2301      	movs	r3, #1
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002126:	f7fe fe2d 	bl	8000d84 <HAL_GetTick>
 800212a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002132:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d00c      	beq.n	800215e <HAL_SPI_TransmitReceive+0x4a>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800214a:	d106      	bne.n	800215a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <HAL_SPI_TransmitReceive+0x46>
 8002154:	7ffb      	ldrb	r3, [r7, #31]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d001      	beq.n	800215e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
 800215c:	e17f      	b.n	800245e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_SPI_TransmitReceive+0x5c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_SPI_TransmitReceive+0x5c>
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e174      	b.n	800245e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_SPI_TransmitReceive+0x6e>
 800217e:	2302      	movs	r3, #2
 8002180:	e16d      	b.n	800245e <HAL_SPI_TransmitReceive+0x34a>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b04      	cmp	r3, #4
 8002194:	d003      	beq.n	800219e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021de:	2b40      	cmp	r3, #64	@ 0x40
 80021e0:	d007      	beq.n	80021f2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021fa:	d17e      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_SPI_TransmitReceive+0xf6>
 8002204:	8afb      	ldrh	r3, [r7, #22]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d16c      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	1c9a      	adds	r2, r3, #2
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800222e:	e059      	b.n	80022e4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d11b      	bne.n	8002276 <HAL_SPI_TransmitReceive+0x162>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d016      	beq.n	8002276 <HAL_SPI_TransmitReceive+0x162>
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	2b01      	cmp	r3, #1
 800224c:	d113      	bne.n	8002276 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	881a      	ldrh	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	1c9a      	adds	r2, r3, #2
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d119      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x1a4>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d014      	beq.n	80022b8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002298:	b292      	uxth	r2, r2
 800229a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a0:	1c9a      	adds	r2, r3, #2
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022b8:	f7fe fd64 	bl	8000d84 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d80d      	bhi.n	80022e4 <HAL_SPI_TransmitReceive+0x1d0>
 80022c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d009      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0bc      	b.n	800245e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1a0      	bne.n	8002230 <HAL_SPI_TransmitReceive+0x11c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d19b      	bne.n	8002230 <HAL_SPI_TransmitReceive+0x11c>
 80022f8:	e082      	b.n	8002400 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x1f4>
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d171      	bne.n	80023ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800232e:	e05d      	b.n	80023ec <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d11c      	bne.n	8002378 <HAL_SPI_TransmitReceive+0x264>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d017      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x264>
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	2b01      	cmp	r3, #1
 800234c:	d114      	bne.n	8002378 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	330c      	adds	r3, #12
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d119      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x2a6>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d014      	beq.n	80023ba <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b6:	2301      	movs	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023ba:	f7fe fce3 	bl	8000d84 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d803      	bhi.n	80023d2 <HAL_SPI_TransmitReceive+0x2be>
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d102      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x2c4>
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e038      	b.n	800245e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d19c      	bne.n	8002330 <HAL_SPI_TransmitReceive+0x21c>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d197      	bne.n	8002330 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f91d 	bl	8002644 <SPI_EndRxTxTransaction>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e01d      	b.n	800245e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800245c:	2300      	movs	r3, #0
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3728      	adds	r7, #40	@ 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002478:	f7fe fc84 	bl	8000d84 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002488:	f7fe fc7c 	bl	8000d84 <HAL_GetTick>
 800248c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800248e:	4b39      	ldr	r3, [pc, #228]	@ (8002574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	015b      	lsls	r3, r3, #5
 8002494:	0d1b      	lsrs	r3, r3, #20
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800249e:	e055      	b.n	800254c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d051      	beq.n	800254c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024a8:	f7fe fc6c 	bl	8000d84 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d902      	bls.n	80024be <SPI_WaitFlagStateUntilTimeout+0x56>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13d      	bne.n	800253a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024d6:	d111      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024e0:	d004      	beq.n	80024ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ea:	d107      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002504:	d10f      	bne.n	8002526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e018      	b.n	800256c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	e002      	b.n	800254c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3b01      	subs	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4013      	ands	r3, r2
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	429a      	cmp	r2, r3
 8002568:	d19a      	bne.n	80024a0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000000 	.word	0x20000000

08002578 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800258c:	d111      	bne.n	80025b2 <SPI_EndRxTransaction+0x3a>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002596:	d004      	beq.n	80025a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a0:	d107      	bne.n	80025b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ba:	d12a      	bne.n	8002612 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c4:	d012      	beq.n	80025ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	@ 0x80
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff ff49 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02d      	beq.n	8002638 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e026      	b.n	800263a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	2101      	movs	r1, #1
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff ff36 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01a      	beq.n	8002638 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e013      	b.n	800263a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	2101      	movs	r1, #1
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff ff23 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e000      	b.n	800263a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2201      	movs	r2, #1
 8002658:	2102      	movs	r1, #2
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ff04 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e032      	b.n	80026dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <SPI_EndRxTxTransaction+0xa0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <SPI_EndRxTxTransaction+0xa4>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	0d5b      	lsrs	r3, r3, #21
 8002682:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002694:	d112      	bne.n	80026bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	@ 0x80
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff fee1 	bl	8002468 <SPI_WaitFlagStateUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d016      	beq.n	80026da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e00f      	b.n	80026dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d2:	2b80      	cmp	r3, #128	@ 0x80
 80026d4:	d0f2      	beq.n	80026bc <SPI_EndRxTxTransaction+0x78>
 80026d6:	e000      	b.n	80026da <SPI_EndRxTxTransaction+0x96>
        break;
 80026d8:	bf00      	nop
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000000 	.word	0x20000000
 80026e8:	165e9f81 	.word	0x165e9f81

080026ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e042      	b.n	8002784 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe f97a 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800272e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f973 	bl	8002a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d175      	bne.n	8002898 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Transmit+0x2c>
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e06e      	b.n	800289a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2221      	movs	r2, #33	@ 0x21
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ca:	f7fe fadb 	bl	8000d84 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e4:	d108      	bne.n	80027f8 <HAL_UART_Transmit+0x6c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d104      	bne.n	80027f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e003      	b.n	8002800 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002800:	e02e      	b.n	8002860 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	2180      	movs	r1, #128	@ 0x80
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f848 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e03a      	b.n	800289a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10b      	bne.n	8002842 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002838:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	3302      	adds	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e007      	b.n	8002852 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3301      	adds	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1cb      	bne.n	8002802 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2140      	movs	r1, #64	@ 0x40
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f814 	bl	80028a2 <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e006      	b.n	800289a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b2:	e03b      	b.n	800292c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d037      	beq.n	800292c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028bc:	f7fe fa62 	bl	8000d84 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	6a3a      	ldr	r2, [r7, #32]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d302      	bcc.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e03a      	b.n	800294c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <UART_WaitOnFlagUntilTimeout+0x8a>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b80      	cmp	r3, #128	@ 0x80
 80028e8:	d020      	beq.n	800292c <UART_WaitOnFlagUntilTimeout+0x8a>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b40      	cmp	r3, #64	@ 0x40
 80028ee:	d01d      	beq.n	800292c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d116      	bne.n	800292c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f81d 	bl	8002954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2208      	movs	r2, #8
 800291e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e00f      	b.n	800294c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	429a      	cmp	r2, r3
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	429a      	cmp	r2, r3
 8002948:	d0b4      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002954:	b480      	push	{r7}
 8002956:	b095      	sub	sp, #84	@ 0x54
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002966:	e853 3f00 	ldrex	r3, [r3]
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800297c:	643a      	str	r2, [r7, #64]	@ 0x40
 800297e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002980:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002982:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002984:	e841 2300 	strex	r3, r2, [r1]
 8002988:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800298a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e5      	bne.n	800295c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	61fb      	str	r3, [r7, #28]
   return(result);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3314      	adds	r3, #20
 80029ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e5      	bne.n	8002990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d119      	bne.n	8002a00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	60bb      	str	r3, [r7, #8]
   return(result);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f023 0310 	bic.w	r3, r3, #16
 80029e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ec:	61ba      	str	r2, [r7, #24]
 80029ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6979      	ldr	r1, [r7, #20]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	613b      	str	r3, [r7, #16]
   return(result);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e5      	bne.n	80029cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a0e:	bf00      	nop
 8002a10:	3754      	adds	r7, #84	@ 0x54
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a20:	b0c0      	sub	sp, #256	@ 0x100
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	68d9      	ldr	r1, [r3, #12]
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	ea40 0301 	orr.w	r3, r0, r1
 8002a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a74:	f021 010c 	bic.w	r1, r1, #12
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a82:	430b      	orrs	r3, r1
 8002a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a96:	6999      	ldr	r1, [r3, #24]
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	ea40 0301 	orr.w	r3, r0, r1
 8002aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce8 <UART_SetConfig+0x2cc>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d005      	beq.n	8002abc <UART_SetConfig+0xa0>
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b8d      	ldr	r3, [pc, #564]	@ (8002cec <UART_SetConfig+0x2d0>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d104      	bne.n	8002ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002abc:	f7fe fd2c 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8002ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ac4:	e003      	b.n	8002ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ac6:	f7fe fd13 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8002aca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad8:	f040 810c 	bne.w	8002cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	1891      	adds	r1, r2, r2
 8002af4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002af6:	415b      	adcs	r3, r3
 8002af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002afe:	4621      	mov	r1, r4
 8002b00:	eb12 0801 	adds.w	r8, r2, r1
 8002b04:	4629      	mov	r1, r5
 8002b06:	eb43 0901 	adc.w	r9, r3, r1
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1e:	4690      	mov	r8, r2
 8002b20:	4699      	mov	r9, r3
 8002b22:	4623      	mov	r3, r4
 8002b24:	eb18 0303 	adds.w	r3, r8, r3
 8002b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	eb49 0303 	adc.w	r3, r9, r3
 8002b32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	18db      	adds	r3, r3, r3
 8002b4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b50:	4613      	mov	r3, r2
 8002b52:	eb42 0303 	adc.w	r3, r2, r3
 8002b56:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b60:	f7fd fbae 	bl	80002c0 <__aeabi_uldivmod>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4b61      	ldr	r3, [pc, #388]	@ (8002cf0 <UART_SetConfig+0x2d4>)
 8002b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	011c      	lsls	r4, r3, #4
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b94:	4641      	mov	r1, r8
 8002b96:	eb12 0a01 	adds.w	sl, r2, r1
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb4:	4692      	mov	sl, r2
 8002bb6:	469b      	mov	fp, r3
 8002bb8:	4643      	mov	r3, r8
 8002bba:	eb1a 0303 	adds.w	r3, sl, r3
 8002bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002be0:	460b      	mov	r3, r1
 8002be2:	18db      	adds	r3, r3, r3
 8002be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002be6:	4613      	mov	r3, r2
 8002be8:	eb42 0303 	adc.w	r3, r2, r3
 8002bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bf6:	f7fd fb63 	bl	80002c0 <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <UART_SetConfig+0x2d4>)
 8002c02:	fba3 2301 	umull	r2, r3, r3, r1
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2264      	movs	r2, #100	@ 0x64
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	1acb      	subs	r3, r1, r3
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c16:	4b36      	ldr	r3, [pc, #216]	@ (8002cf0 <UART_SetConfig+0x2d4>)
 8002c18:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c24:	441c      	add	r4, r3
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c40:	415b      	adcs	r3, r3
 8002c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c48:	4641      	mov	r1, r8
 8002c4a:	1851      	adds	r1, r2, r1
 8002c4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c4e:	4649      	mov	r1, r9
 8002c50:	414b      	adcs	r3, r1
 8002c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c60:	4659      	mov	r1, fp
 8002c62:	00cb      	lsls	r3, r1, #3
 8002c64:	4651      	mov	r1, sl
 8002c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	00ca      	lsls	r2, r1, #3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	4642      	mov	r2, r8
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	460a      	mov	r2, r1
 8002c80:	eb42 0303 	adc.w	r3, r2, r3
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	18db      	adds	r3, r3, r3
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cb2:	f7fd fb05 	bl	80002c0 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <UART_SetConfig+0x2d4>)
 8002cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	2164      	movs	r1, #100	@ 0x64
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	3332      	adds	r3, #50	@ 0x32
 8002cce:	4a08      	ldr	r2, [pc, #32]	@ (8002cf0 <UART_SetConfig+0x2d4>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	f003 0207 	and.w	r2, r3, #7
 8002cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4422      	add	r2, r4
 8002ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce4:	e106      	b.n	8002ef4 <UART_SetConfig+0x4d8>
 8002ce6:	bf00      	nop
 8002ce8:	40011000 	.word	0x40011000
 8002cec:	40011400 	.word	0x40011400
 8002cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d06:	4642      	mov	r2, r8
 8002d08:	464b      	mov	r3, r9
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	6239      	str	r1, [r7, #32]
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d16:	4641      	mov	r1, r8
 8002d18:	1854      	adds	r4, r2, r1
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	eb43 0501 	adc.w	r5, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	00eb      	lsls	r3, r5, #3
 8002d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2e:	00e2      	lsls	r2, r4, #3
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	4643      	mov	r3, r8
 8002d36:	18e3      	adds	r3, r4, r3
 8002d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	eb45 0303 	adc.w	r3, r5, r3
 8002d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d62:	4629      	mov	r1, r5
 8002d64:	008b      	lsls	r3, r1, #2
 8002d66:	4621      	mov	r1, r4
 8002d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	008a      	lsls	r2, r1, #2
 8002d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d74:	f7fd faa4 	bl	80002c0 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4b60      	ldr	r3, [pc, #384]	@ (8002f00 <UART_SetConfig+0x4e4>)
 8002d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	011c      	lsls	r4, r3, #4
 8002d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	61b9      	str	r1, [r7, #24]
 8002da0:	415b      	adcs	r3, r3
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da8:	4641      	mov	r1, r8
 8002daa:	1851      	adds	r1, r2, r1
 8002dac:	6139      	str	r1, [r7, #16]
 8002dae:	4649      	mov	r1, r9
 8002db0:	414b      	adcs	r3, r1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	00cb      	lsls	r3, r1, #3
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dca:	4651      	mov	r1, sl
 8002dcc:	00ca      	lsls	r2, r1, #3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ddc:	464b      	mov	r3, r9
 8002dde:	460a      	mov	r2, r1
 8002de0:	eb42 0303 	adc.w	r3, r2, r3
 8002de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002df2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e00:	4649      	mov	r1, r9
 8002e02:	008b      	lsls	r3, r1, #2
 8002e04:	4641      	mov	r1, r8
 8002e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	008a      	lsls	r2, r1, #2
 8002e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e12:	f7fd fa55 	bl	80002c0 <__aeabi_uldivmod>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4b38      	ldr	r3, [pc, #224]	@ (8002f00 <UART_SetConfig+0x4e4>)
 8002e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2264      	movs	r2, #100	@ 0x64
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	1acb      	subs	r3, r1, r3
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	3332      	adds	r3, #50	@ 0x32
 8002e30:	4a33      	ldr	r2, [pc, #204]	@ (8002f00 <UART_SetConfig+0x4e4>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3c:	441c      	add	r4, r3
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e46:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	415b      	adcs	r3, r3
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6039      	str	r1, [r7, #0]
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e8e:	464b      	mov	r3, r9
 8002e90:	460a      	mov	r2, r1
 8002e92:	eb42 0303 	adc.w	r3, r2, r3
 8002e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ea2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	008b      	lsls	r3, r1, #2
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eba:	4641      	mov	r1, r8
 8002ebc:	008a      	lsls	r2, r1, #2
 8002ebe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ec2:	f7fd f9fd 	bl	80002c0 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <UART_SetConfig+0x4e4>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	@ 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	@ 0x32
 8002ede:	4a08      	ldr	r2, [pc, #32]	@ (8002f00 <UART_SetConfig+0x4e4>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4422      	add	r2, r4
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002efa:	46bd      	mov	sp, r7
 8002efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f00:	51eb851f 	.word	0x51eb851f

08002f04 <std>:
 8002f04:	2300      	movs	r3, #0
 8002f06:	b510      	push	{r4, lr}
 8002f08:	4604      	mov	r4, r0
 8002f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f12:	6083      	str	r3, [r0, #8]
 8002f14:	8181      	strh	r1, [r0, #12]
 8002f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f18:	81c2      	strh	r2, [r0, #14]
 8002f1a:	6183      	str	r3, [r0, #24]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	2208      	movs	r2, #8
 8002f20:	305c      	adds	r0, #92	@ 0x5c
 8002f22:	f000 fa1d 	bl	8003360 <memset>
 8002f26:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <std+0x58>)
 8002f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <std+0x5c>)
 8002f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <std+0x60>)
 8002f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <std+0x64>)
 8002f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <std+0x68>)
 8002f38:	6224      	str	r4, [r4, #32]
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	d006      	beq.n	8002f4c <std+0x48>
 8002f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f42:	4294      	cmp	r4, r2
 8002f44:	d002      	beq.n	8002f4c <std+0x48>
 8002f46:	33d0      	adds	r3, #208	@ 0xd0
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	d105      	bne.n	8002f58 <std+0x54>
 8002f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f54:	f000 ba7c 	b.w	8003450 <__retarget_lock_init_recursive>
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	bf00      	nop
 8002f5c:	080031b1 	.word	0x080031b1
 8002f60:	080031d3 	.word	0x080031d3
 8002f64:	0800320b 	.word	0x0800320b
 8002f68:	0800322f 	.word	0x0800322f
 8002f6c:	2000012c 	.word	0x2000012c

08002f70 <stdio_exit_handler>:
 8002f70:	4a02      	ldr	r2, [pc, #8]	@ (8002f7c <stdio_exit_handler+0xc>)
 8002f72:	4903      	ldr	r1, [pc, #12]	@ (8002f80 <stdio_exit_handler+0x10>)
 8002f74:	4803      	ldr	r0, [pc, #12]	@ (8002f84 <stdio_exit_handler+0x14>)
 8002f76:	f000 b869 	b.w	800304c <_fwalk_sglue>
 8002f7a:	bf00      	nop
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	08003d19 	.word	0x08003d19
 8002f84:	2000001c 	.word	0x2000001c

08002f88 <cleanup_stdio>:
 8002f88:	6841      	ldr	r1, [r0, #4]
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <cleanup_stdio+0x34>)
 8002f8c:	4299      	cmp	r1, r3
 8002f8e:	b510      	push	{r4, lr}
 8002f90:	4604      	mov	r4, r0
 8002f92:	d001      	beq.n	8002f98 <cleanup_stdio+0x10>
 8002f94:	f000 fec0 	bl	8003d18 <_fflush_r>
 8002f98:	68a1      	ldr	r1, [r4, #8]
 8002f9a:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <cleanup_stdio+0x38>)
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	d002      	beq.n	8002fa6 <cleanup_stdio+0x1e>
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f000 feb9 	bl	8003d18 <_fflush_r>
 8002fa6:	68e1      	ldr	r1, [r4, #12]
 8002fa8:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <cleanup_stdio+0x3c>)
 8002faa:	4299      	cmp	r1, r3
 8002fac:	d004      	beq.n	8002fb8 <cleanup_stdio+0x30>
 8002fae:	4620      	mov	r0, r4
 8002fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb4:	f000 beb0 	b.w	8003d18 <_fflush_r>
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000012c 	.word	0x2000012c
 8002fc0:	20000194 	.word	0x20000194
 8002fc4:	200001fc 	.word	0x200001fc

08002fc8 <global_stdio_init.part.0>:
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <global_stdio_init.part.0+0x30>)
 8002fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8002ffc <global_stdio_init.part.0+0x34>)
 8002fce:	4a0c      	ldr	r2, [pc, #48]	@ (8003000 <global_stdio_init.part.0+0x38>)
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	f7ff ff94 	bl	8002f04 <std>
 8002fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2109      	movs	r1, #9
 8002fe4:	f7ff ff8e 	bl	8002f04 <std>
 8002fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fec:	2202      	movs	r2, #2
 8002fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff2:	2112      	movs	r1, #18
 8002ff4:	f7ff bf86 	b.w	8002f04 <std>
 8002ff8:	20000264 	.word	0x20000264
 8002ffc:	2000012c 	.word	0x2000012c
 8003000:	08002f71 	.word	0x08002f71

08003004 <__sfp_lock_acquire>:
 8003004:	4801      	ldr	r0, [pc, #4]	@ (800300c <__sfp_lock_acquire+0x8>)
 8003006:	f000 ba24 	b.w	8003452 <__retarget_lock_acquire_recursive>
 800300a:	bf00      	nop
 800300c:	2000026d 	.word	0x2000026d

08003010 <__sfp_lock_release>:
 8003010:	4801      	ldr	r0, [pc, #4]	@ (8003018 <__sfp_lock_release+0x8>)
 8003012:	f000 ba1f 	b.w	8003454 <__retarget_lock_release_recursive>
 8003016:	bf00      	nop
 8003018:	2000026d 	.word	0x2000026d

0800301c <__sinit>:
 800301c:	b510      	push	{r4, lr}
 800301e:	4604      	mov	r4, r0
 8003020:	f7ff fff0 	bl	8003004 <__sfp_lock_acquire>
 8003024:	6a23      	ldr	r3, [r4, #32]
 8003026:	b11b      	cbz	r3, 8003030 <__sinit+0x14>
 8003028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800302c:	f7ff bff0 	b.w	8003010 <__sfp_lock_release>
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <__sinit+0x28>)
 8003032:	6223      	str	r3, [r4, #32]
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <__sinit+0x2c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f5      	bne.n	8003028 <__sinit+0xc>
 800303c:	f7ff ffc4 	bl	8002fc8 <global_stdio_init.part.0>
 8003040:	e7f2      	b.n	8003028 <__sinit+0xc>
 8003042:	bf00      	nop
 8003044:	08002f89 	.word	0x08002f89
 8003048:	20000264 	.word	0x20000264

0800304c <_fwalk_sglue>:
 800304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003050:	4607      	mov	r7, r0
 8003052:	4688      	mov	r8, r1
 8003054:	4614      	mov	r4, r2
 8003056:	2600      	movs	r6, #0
 8003058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800305c:	f1b9 0901 	subs.w	r9, r9, #1
 8003060:	d505      	bpl.n	800306e <_fwalk_sglue+0x22>
 8003062:	6824      	ldr	r4, [r4, #0]
 8003064:	2c00      	cmp	r4, #0
 8003066:	d1f7      	bne.n	8003058 <_fwalk_sglue+0xc>
 8003068:	4630      	mov	r0, r6
 800306a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800306e:	89ab      	ldrh	r3, [r5, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d907      	bls.n	8003084 <_fwalk_sglue+0x38>
 8003074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003078:	3301      	adds	r3, #1
 800307a:	d003      	beq.n	8003084 <_fwalk_sglue+0x38>
 800307c:	4629      	mov	r1, r5
 800307e:	4638      	mov	r0, r7
 8003080:	47c0      	blx	r8
 8003082:	4306      	orrs	r6, r0
 8003084:	3568      	adds	r5, #104	@ 0x68
 8003086:	e7e9      	b.n	800305c <_fwalk_sglue+0x10>

08003088 <_puts_r>:
 8003088:	6a03      	ldr	r3, [r0, #32]
 800308a:	b570      	push	{r4, r5, r6, lr}
 800308c:	6884      	ldr	r4, [r0, #8]
 800308e:	4605      	mov	r5, r0
 8003090:	460e      	mov	r6, r1
 8003092:	b90b      	cbnz	r3, 8003098 <_puts_r+0x10>
 8003094:	f7ff ffc2 	bl	800301c <__sinit>
 8003098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800309a:	07db      	lsls	r3, r3, #31
 800309c:	d405      	bmi.n	80030aa <_puts_r+0x22>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	0598      	lsls	r0, r3, #22
 80030a2:	d402      	bmi.n	80030aa <_puts_r+0x22>
 80030a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030a6:	f000 f9d4 	bl	8003452 <__retarget_lock_acquire_recursive>
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	0719      	lsls	r1, r3, #28
 80030ae:	d502      	bpl.n	80030b6 <_puts_r+0x2e>
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d135      	bne.n	8003122 <_puts_r+0x9a>
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 f8fb 	bl	80032b4 <__swsetup_r>
 80030be:	b380      	cbz	r0, 8003122 <_puts_r+0x9a>
 80030c0:	f04f 35ff 	mov.w	r5, #4294967295
 80030c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030c6:	07da      	lsls	r2, r3, #31
 80030c8:	d405      	bmi.n	80030d6 <_puts_r+0x4e>
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	059b      	lsls	r3, r3, #22
 80030ce:	d402      	bmi.n	80030d6 <_puts_r+0x4e>
 80030d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030d2:	f000 f9bf 	bl	8003454 <__retarget_lock_release_recursive>
 80030d6:	4628      	mov	r0, r5
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da04      	bge.n	80030e8 <_puts_r+0x60>
 80030de:	69a2      	ldr	r2, [r4, #24]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	dc17      	bgt.n	8003114 <_puts_r+0x8c>
 80030e4:	290a      	cmp	r1, #10
 80030e6:	d015      	beq.n	8003114 <_puts_r+0x8c>
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	6022      	str	r2, [r4, #0]
 80030ee:	7019      	strb	r1, [r3, #0]
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030f6:	3b01      	subs	r3, #1
 80030f8:	60a3      	str	r3, [r4, #8]
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d1ed      	bne.n	80030da <_puts_r+0x52>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da11      	bge.n	8003126 <_puts_r+0x9e>
 8003102:	4622      	mov	r2, r4
 8003104:	210a      	movs	r1, #10
 8003106:	4628      	mov	r0, r5
 8003108:	f000 f895 	bl	8003236 <__swbuf_r>
 800310c:	3001      	adds	r0, #1
 800310e:	d0d7      	beq.n	80030c0 <_puts_r+0x38>
 8003110:	250a      	movs	r5, #10
 8003112:	e7d7      	b.n	80030c4 <_puts_r+0x3c>
 8003114:	4622      	mov	r2, r4
 8003116:	4628      	mov	r0, r5
 8003118:	f000 f88d 	bl	8003236 <__swbuf_r>
 800311c:	3001      	adds	r0, #1
 800311e:	d1e7      	bne.n	80030f0 <_puts_r+0x68>
 8003120:	e7ce      	b.n	80030c0 <_puts_r+0x38>
 8003122:	3e01      	subs	r6, #1
 8003124:	e7e4      	b.n	80030f0 <_puts_r+0x68>
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	6022      	str	r2, [r4, #0]
 800312c:	220a      	movs	r2, #10
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e7ee      	b.n	8003110 <_puts_r+0x88>
	...

08003134 <puts>:
 8003134:	4b02      	ldr	r3, [pc, #8]	@ (8003140 <puts+0xc>)
 8003136:	4601      	mov	r1, r0
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	f7ff bfa5 	b.w	8003088 <_puts_r>
 800313e:	bf00      	nop
 8003140:	20000018 	.word	0x20000018

08003144 <sniprintf>:
 8003144:	b40c      	push	{r2, r3}
 8003146:	b530      	push	{r4, r5, lr}
 8003148:	4b18      	ldr	r3, [pc, #96]	@ (80031ac <sniprintf+0x68>)
 800314a:	1e0c      	subs	r4, r1, #0
 800314c:	681d      	ldr	r5, [r3, #0]
 800314e:	b09d      	sub	sp, #116	@ 0x74
 8003150:	da08      	bge.n	8003164 <sniprintf+0x20>
 8003152:	238b      	movs	r3, #139	@ 0x8b
 8003154:	602b      	str	r3, [r5, #0]
 8003156:	f04f 30ff 	mov.w	r0, #4294967295
 800315a:	b01d      	add	sp, #116	@ 0x74
 800315c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003160:	b002      	add	sp, #8
 8003162:	4770      	bx	lr
 8003164:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003168:	f8ad 3014 	strh.w	r3, [sp, #20]
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003172:	bf14      	ite	ne
 8003174:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003178:	4623      	moveq	r3, r4
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	9307      	str	r3, [sp, #28]
 800317e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003182:	9002      	str	r0, [sp, #8]
 8003184:	9006      	str	r0, [sp, #24]
 8003186:	f8ad 3016 	strh.w	r3, [sp, #22]
 800318a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800318c:	ab21      	add	r3, sp, #132	@ 0x84
 800318e:	a902      	add	r1, sp, #8
 8003190:	4628      	mov	r0, r5
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	f000 fab4 	bl	8003700 <_svfiprintf_r>
 8003198:	1c43      	adds	r3, r0, #1
 800319a:	bfbc      	itt	lt
 800319c:	238b      	movlt	r3, #139	@ 0x8b
 800319e:	602b      	strlt	r3, [r5, #0]
 80031a0:	2c00      	cmp	r4, #0
 80031a2:	d0da      	beq.n	800315a <sniprintf+0x16>
 80031a4:	9b02      	ldr	r3, [sp, #8]
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e7d6      	b.n	800315a <sniprintf+0x16>
 80031ac:	20000018 	.word	0x20000018

080031b0 <__sread>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	460c      	mov	r4, r1
 80031b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b8:	f000 f8fc 	bl	80033b4 <_read_r>
 80031bc:	2800      	cmp	r0, #0
 80031be:	bfab      	itete	ge
 80031c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031c2:	89a3      	ldrhlt	r3, [r4, #12]
 80031c4:	181b      	addge	r3, r3, r0
 80031c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031ca:	bfac      	ite	ge
 80031cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031ce:	81a3      	strhlt	r3, [r4, #12]
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <__swrite>:
 80031d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d6:	461f      	mov	r7, r3
 80031d8:	898b      	ldrh	r3, [r1, #12]
 80031da:	05db      	lsls	r3, r3, #23
 80031dc:	4605      	mov	r5, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	4616      	mov	r6, r2
 80031e2:	d505      	bpl.n	80031f0 <__swrite+0x1e>
 80031e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e8:	2302      	movs	r3, #2
 80031ea:	2200      	movs	r2, #0
 80031ec:	f000 f8d0 	bl	8003390 <_lseek_r>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031fa:	81a3      	strh	r3, [r4, #12]
 80031fc:	4632      	mov	r2, r6
 80031fe:	463b      	mov	r3, r7
 8003200:	4628      	mov	r0, r5
 8003202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003206:	f000 b8e7 	b.w	80033d8 <_write_r>

0800320a <__sseek>:
 800320a:	b510      	push	{r4, lr}
 800320c:	460c      	mov	r4, r1
 800320e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003212:	f000 f8bd 	bl	8003390 <_lseek_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	bf15      	itete	ne
 800321c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800321e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003222:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003226:	81a3      	strheq	r3, [r4, #12]
 8003228:	bf18      	it	ne
 800322a:	81a3      	strhne	r3, [r4, #12]
 800322c:	bd10      	pop	{r4, pc}

0800322e <__sclose>:
 800322e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003232:	f000 b89d 	b.w	8003370 <_close_r>

08003236 <__swbuf_r>:
 8003236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003238:	460e      	mov	r6, r1
 800323a:	4614      	mov	r4, r2
 800323c:	4605      	mov	r5, r0
 800323e:	b118      	cbz	r0, 8003248 <__swbuf_r+0x12>
 8003240:	6a03      	ldr	r3, [r0, #32]
 8003242:	b90b      	cbnz	r3, 8003248 <__swbuf_r+0x12>
 8003244:	f7ff feea 	bl	800301c <__sinit>
 8003248:	69a3      	ldr	r3, [r4, #24]
 800324a:	60a3      	str	r3, [r4, #8]
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	071a      	lsls	r2, r3, #28
 8003250:	d501      	bpl.n	8003256 <__swbuf_r+0x20>
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	b943      	cbnz	r3, 8003268 <__swbuf_r+0x32>
 8003256:	4621      	mov	r1, r4
 8003258:	4628      	mov	r0, r5
 800325a:	f000 f82b 	bl	80032b4 <__swsetup_r>
 800325e:	b118      	cbz	r0, 8003268 <__swbuf_r+0x32>
 8003260:	f04f 37ff 	mov.w	r7, #4294967295
 8003264:	4638      	mov	r0, r7
 8003266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	6922      	ldr	r2, [r4, #16]
 800326c:	1a98      	subs	r0, r3, r2
 800326e:	6963      	ldr	r3, [r4, #20]
 8003270:	b2f6      	uxtb	r6, r6
 8003272:	4283      	cmp	r3, r0
 8003274:	4637      	mov	r7, r6
 8003276:	dc05      	bgt.n	8003284 <__swbuf_r+0x4e>
 8003278:	4621      	mov	r1, r4
 800327a:	4628      	mov	r0, r5
 800327c:	f000 fd4c 	bl	8003d18 <_fflush_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	d1ed      	bne.n	8003260 <__swbuf_r+0x2a>
 8003284:	68a3      	ldr	r3, [r4, #8]
 8003286:	3b01      	subs	r3, #1
 8003288:	60a3      	str	r3, [r4, #8]
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	6022      	str	r2, [r4, #0]
 8003290:	701e      	strb	r6, [r3, #0]
 8003292:	6962      	ldr	r2, [r4, #20]
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	429a      	cmp	r2, r3
 8003298:	d004      	beq.n	80032a4 <__swbuf_r+0x6e>
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	07db      	lsls	r3, r3, #31
 800329e:	d5e1      	bpl.n	8003264 <__swbuf_r+0x2e>
 80032a0:	2e0a      	cmp	r6, #10
 80032a2:	d1df      	bne.n	8003264 <__swbuf_r+0x2e>
 80032a4:	4621      	mov	r1, r4
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 fd36 	bl	8003d18 <_fflush_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d0d9      	beq.n	8003264 <__swbuf_r+0x2e>
 80032b0:	e7d6      	b.n	8003260 <__swbuf_r+0x2a>
	...

080032b4 <__swsetup_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4b29      	ldr	r3, [pc, #164]	@ (800335c <__swsetup_r+0xa8>)
 80032b8:	4605      	mov	r5, r0
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	460c      	mov	r4, r1
 80032be:	b118      	cbz	r0, 80032c8 <__swsetup_r+0x14>
 80032c0:	6a03      	ldr	r3, [r0, #32]
 80032c2:	b90b      	cbnz	r3, 80032c8 <__swsetup_r+0x14>
 80032c4:	f7ff feaa 	bl	800301c <__sinit>
 80032c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032cc:	0719      	lsls	r1, r3, #28
 80032ce:	d422      	bmi.n	8003316 <__swsetup_r+0x62>
 80032d0:	06da      	lsls	r2, r3, #27
 80032d2:	d407      	bmi.n	80032e4 <__swsetup_r+0x30>
 80032d4:	2209      	movs	r2, #9
 80032d6:	602a      	str	r2, [r5, #0]
 80032d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	f04f 30ff 	mov.w	r0, #4294967295
 80032e2:	e033      	b.n	800334c <__swsetup_r+0x98>
 80032e4:	0758      	lsls	r0, r3, #29
 80032e6:	d512      	bpl.n	800330e <__swsetup_r+0x5a>
 80032e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032ea:	b141      	cbz	r1, 80032fe <__swsetup_r+0x4a>
 80032ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032f0:	4299      	cmp	r1, r3
 80032f2:	d002      	beq.n	80032fa <__swsetup_r+0x46>
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 f8af 	bl	8003458 <_free_r>
 80032fa:	2300      	movs	r3, #0
 80032fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	2300      	movs	r3, #0
 8003308:	6063      	str	r3, [r4, #4]
 800330a:	6923      	ldr	r3, [r4, #16]
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	81a3      	strh	r3, [r4, #12]
 8003316:	6923      	ldr	r3, [r4, #16]
 8003318:	b94b      	cbnz	r3, 800332e <__swsetup_r+0x7a>
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003324:	d003      	beq.n	800332e <__swsetup_r+0x7a>
 8003326:	4621      	mov	r1, r4
 8003328:	4628      	mov	r0, r5
 800332a:	f000 fd43 	bl	8003db4 <__smakebuf_r>
 800332e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003332:	f013 0201 	ands.w	r2, r3, #1
 8003336:	d00a      	beq.n	800334e <__swsetup_r+0x9a>
 8003338:	2200      	movs	r2, #0
 800333a:	60a2      	str	r2, [r4, #8]
 800333c:	6962      	ldr	r2, [r4, #20]
 800333e:	4252      	negs	r2, r2
 8003340:	61a2      	str	r2, [r4, #24]
 8003342:	6922      	ldr	r2, [r4, #16]
 8003344:	b942      	cbnz	r2, 8003358 <__swsetup_r+0xa4>
 8003346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800334a:	d1c5      	bne.n	80032d8 <__swsetup_r+0x24>
 800334c:	bd38      	pop	{r3, r4, r5, pc}
 800334e:	0799      	lsls	r1, r3, #30
 8003350:	bf58      	it	pl
 8003352:	6962      	ldrpl	r2, [r4, #20]
 8003354:	60a2      	str	r2, [r4, #8]
 8003356:	e7f4      	b.n	8003342 <__swsetup_r+0x8e>
 8003358:	2000      	movs	r0, #0
 800335a:	e7f7      	b.n	800334c <__swsetup_r+0x98>
 800335c:	20000018 	.word	0x20000018

08003360 <memset>:
 8003360:	4402      	add	r2, r0
 8003362:	4603      	mov	r3, r0
 8003364:	4293      	cmp	r3, r2
 8003366:	d100      	bne.n	800336a <memset+0xa>
 8003368:	4770      	bx	lr
 800336a:	f803 1b01 	strb.w	r1, [r3], #1
 800336e:	e7f9      	b.n	8003364 <memset+0x4>

08003370 <_close_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4d06      	ldr	r5, [pc, #24]	@ (800338c <_close_r+0x1c>)
 8003374:	2300      	movs	r3, #0
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	f7fd fbf6 	bl	8000b6c <_close>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_close_r+0x1a>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_close_r+0x1a>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20000268 	.word	0x20000268

08003390 <_lseek_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4d07      	ldr	r5, [pc, #28]	@ (80033b0 <_lseek_r+0x20>)
 8003394:	4604      	mov	r4, r0
 8003396:	4608      	mov	r0, r1
 8003398:	4611      	mov	r1, r2
 800339a:	2200      	movs	r2, #0
 800339c:	602a      	str	r2, [r5, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7fd fc0b 	bl	8000bba <_lseek>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_lseek_r+0x1e>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_lseek_r+0x1e>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	20000268 	.word	0x20000268

080033b4 <_read_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4d07      	ldr	r5, [pc, #28]	@ (80033d4 <_read_r+0x20>)
 80033b8:	4604      	mov	r4, r0
 80033ba:	4608      	mov	r0, r1
 80033bc:	4611      	mov	r1, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	602a      	str	r2, [r5, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f7fd fb99 	bl	8000afa <_read>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_read_r+0x1e>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_read_r+0x1e>
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	20000268 	.word	0x20000268

080033d8 <_write_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4d07      	ldr	r5, [pc, #28]	@ (80033f8 <_write_r+0x20>)
 80033dc:	4604      	mov	r4, r0
 80033de:	4608      	mov	r0, r1
 80033e0:	4611      	mov	r1, r2
 80033e2:	2200      	movs	r2, #0
 80033e4:	602a      	str	r2, [r5, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7fd fba4 	bl	8000b34 <_write>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d102      	bne.n	80033f6 <_write_r+0x1e>
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	b103      	cbz	r3, 80033f6 <_write_r+0x1e>
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	20000268 	.word	0x20000268

080033fc <__errno>:
 80033fc:	4b01      	ldr	r3, [pc, #4]	@ (8003404 <__errno+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000018 	.word	0x20000018

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	@ (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	@ (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	@ (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	@ (800344c <__libc_init_array+0x44>)
 800341c:	f000 fd96 	bl	8003f4c <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08004014 	.word	0x08004014
 8003444:	08004014 	.word	0x08004014
 8003448:	08004014 	.word	0x08004014
 800344c:	08004018 	.word	0x08004018

08003450 <__retarget_lock_init_recursive>:
 8003450:	4770      	bx	lr

08003452 <__retarget_lock_acquire_recursive>:
 8003452:	4770      	bx	lr

08003454 <__retarget_lock_release_recursive>:
 8003454:	4770      	bx	lr
	...

08003458 <_free_r>:
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4605      	mov	r5, r0
 800345c:	2900      	cmp	r1, #0
 800345e:	d041      	beq.n	80034e4 <_free_r+0x8c>
 8003460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003464:	1f0c      	subs	r4, r1, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfb8      	it	lt
 800346a:	18e4      	addlt	r4, r4, r3
 800346c:	f000 f8e0 	bl	8003630 <__malloc_lock>
 8003470:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <_free_r+0x90>)
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	b933      	cbnz	r3, 8003484 <_free_r+0x2c>
 8003476:	6063      	str	r3, [r4, #4]
 8003478:	6014      	str	r4, [r2, #0]
 800347a:	4628      	mov	r0, r5
 800347c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003480:	f000 b8dc 	b.w	800363c <__malloc_unlock>
 8003484:	42a3      	cmp	r3, r4
 8003486:	d908      	bls.n	800349a <_free_r+0x42>
 8003488:	6820      	ldr	r0, [r4, #0]
 800348a:	1821      	adds	r1, r4, r0
 800348c:	428b      	cmp	r3, r1
 800348e:	bf01      	itttt	eq
 8003490:	6819      	ldreq	r1, [r3, #0]
 8003492:	685b      	ldreq	r3, [r3, #4]
 8003494:	1809      	addeq	r1, r1, r0
 8003496:	6021      	streq	r1, [r4, #0]
 8003498:	e7ed      	b.n	8003476 <_free_r+0x1e>
 800349a:	461a      	mov	r2, r3
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	b10b      	cbz	r3, 80034a4 <_free_r+0x4c>
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	d9fa      	bls.n	800349a <_free_r+0x42>
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	1850      	adds	r0, r2, r1
 80034a8:	42a0      	cmp	r0, r4
 80034aa:	d10b      	bne.n	80034c4 <_free_r+0x6c>
 80034ac:	6820      	ldr	r0, [r4, #0]
 80034ae:	4401      	add	r1, r0
 80034b0:	1850      	adds	r0, r2, r1
 80034b2:	4283      	cmp	r3, r0
 80034b4:	6011      	str	r1, [r2, #0]
 80034b6:	d1e0      	bne.n	800347a <_free_r+0x22>
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	6053      	str	r3, [r2, #4]
 80034be:	4408      	add	r0, r1
 80034c0:	6010      	str	r0, [r2, #0]
 80034c2:	e7da      	b.n	800347a <_free_r+0x22>
 80034c4:	d902      	bls.n	80034cc <_free_r+0x74>
 80034c6:	230c      	movs	r3, #12
 80034c8:	602b      	str	r3, [r5, #0]
 80034ca:	e7d6      	b.n	800347a <_free_r+0x22>
 80034cc:	6820      	ldr	r0, [r4, #0]
 80034ce:	1821      	adds	r1, r4, r0
 80034d0:	428b      	cmp	r3, r1
 80034d2:	bf04      	itt	eq
 80034d4:	6819      	ldreq	r1, [r3, #0]
 80034d6:	685b      	ldreq	r3, [r3, #4]
 80034d8:	6063      	str	r3, [r4, #4]
 80034da:	bf04      	itt	eq
 80034dc:	1809      	addeq	r1, r1, r0
 80034de:	6021      	streq	r1, [r4, #0]
 80034e0:	6054      	str	r4, [r2, #4]
 80034e2:	e7ca      	b.n	800347a <_free_r+0x22>
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
 80034e6:	bf00      	nop
 80034e8:	20000274 	.word	0x20000274

080034ec <sbrk_aligned>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4e0f      	ldr	r6, [pc, #60]	@ (800352c <sbrk_aligned+0x40>)
 80034f0:	460c      	mov	r4, r1
 80034f2:	6831      	ldr	r1, [r6, #0]
 80034f4:	4605      	mov	r5, r0
 80034f6:	b911      	cbnz	r1, 80034fe <sbrk_aligned+0x12>
 80034f8:	f000 fcd4 	bl	8003ea4 <_sbrk_r>
 80034fc:	6030      	str	r0, [r6, #0]
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	f000 fccf 	bl	8003ea4 <_sbrk_r>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d103      	bne.n	8003512 <sbrk_aligned+0x26>
 800350a:	f04f 34ff 	mov.w	r4, #4294967295
 800350e:	4620      	mov	r0, r4
 8003510:	bd70      	pop	{r4, r5, r6, pc}
 8003512:	1cc4      	adds	r4, r0, #3
 8003514:	f024 0403 	bic.w	r4, r4, #3
 8003518:	42a0      	cmp	r0, r4
 800351a:	d0f8      	beq.n	800350e <sbrk_aligned+0x22>
 800351c:	1a21      	subs	r1, r4, r0
 800351e:	4628      	mov	r0, r5
 8003520:	f000 fcc0 	bl	8003ea4 <_sbrk_r>
 8003524:	3001      	adds	r0, #1
 8003526:	d1f2      	bne.n	800350e <sbrk_aligned+0x22>
 8003528:	e7ef      	b.n	800350a <sbrk_aligned+0x1e>
 800352a:	bf00      	nop
 800352c:	20000270 	.word	0x20000270

08003530 <_malloc_r>:
 8003530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003534:	1ccd      	adds	r5, r1, #3
 8003536:	f025 0503 	bic.w	r5, r5, #3
 800353a:	3508      	adds	r5, #8
 800353c:	2d0c      	cmp	r5, #12
 800353e:	bf38      	it	cc
 8003540:	250c      	movcc	r5, #12
 8003542:	2d00      	cmp	r5, #0
 8003544:	4606      	mov	r6, r0
 8003546:	db01      	blt.n	800354c <_malloc_r+0x1c>
 8003548:	42a9      	cmp	r1, r5
 800354a:	d904      	bls.n	8003556 <_malloc_r+0x26>
 800354c:	230c      	movs	r3, #12
 800354e:	6033      	str	r3, [r6, #0]
 8003550:	2000      	movs	r0, #0
 8003552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800362c <_malloc_r+0xfc>
 800355a:	f000 f869 	bl	8003630 <__malloc_lock>
 800355e:	f8d8 3000 	ldr.w	r3, [r8]
 8003562:	461c      	mov	r4, r3
 8003564:	bb44      	cbnz	r4, 80035b8 <_malloc_r+0x88>
 8003566:	4629      	mov	r1, r5
 8003568:	4630      	mov	r0, r6
 800356a:	f7ff ffbf 	bl	80034ec <sbrk_aligned>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	4604      	mov	r4, r0
 8003572:	d158      	bne.n	8003626 <_malloc_r+0xf6>
 8003574:	f8d8 4000 	ldr.w	r4, [r8]
 8003578:	4627      	mov	r7, r4
 800357a:	2f00      	cmp	r7, #0
 800357c:	d143      	bne.n	8003606 <_malloc_r+0xd6>
 800357e:	2c00      	cmp	r4, #0
 8003580:	d04b      	beq.n	800361a <_malloc_r+0xea>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	4639      	mov	r1, r7
 8003586:	4630      	mov	r0, r6
 8003588:	eb04 0903 	add.w	r9, r4, r3
 800358c:	f000 fc8a 	bl	8003ea4 <_sbrk_r>
 8003590:	4581      	cmp	r9, r0
 8003592:	d142      	bne.n	800361a <_malloc_r+0xea>
 8003594:	6821      	ldr	r1, [r4, #0]
 8003596:	1a6d      	subs	r5, r5, r1
 8003598:	4629      	mov	r1, r5
 800359a:	4630      	mov	r0, r6
 800359c:	f7ff ffa6 	bl	80034ec <sbrk_aligned>
 80035a0:	3001      	adds	r0, #1
 80035a2:	d03a      	beq.n	800361a <_malloc_r+0xea>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	442b      	add	r3, r5
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	f8d8 3000 	ldr.w	r3, [r8]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	bb62      	cbnz	r2, 800360c <_malloc_r+0xdc>
 80035b2:	f8c8 7000 	str.w	r7, [r8]
 80035b6:	e00f      	b.n	80035d8 <_malloc_r+0xa8>
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	1b52      	subs	r2, r2, r5
 80035bc:	d420      	bmi.n	8003600 <_malloc_r+0xd0>
 80035be:	2a0b      	cmp	r2, #11
 80035c0:	d917      	bls.n	80035f2 <_malloc_r+0xc2>
 80035c2:	1961      	adds	r1, r4, r5
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	6025      	str	r5, [r4, #0]
 80035c8:	bf18      	it	ne
 80035ca:	6059      	strne	r1, [r3, #4]
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	bf08      	it	eq
 80035d0:	f8c8 1000 	streq.w	r1, [r8]
 80035d4:	5162      	str	r2, [r4, r5]
 80035d6:	604b      	str	r3, [r1, #4]
 80035d8:	4630      	mov	r0, r6
 80035da:	f000 f82f 	bl	800363c <__malloc_unlock>
 80035de:	f104 000b 	add.w	r0, r4, #11
 80035e2:	1d23      	adds	r3, r4, #4
 80035e4:	f020 0007 	bic.w	r0, r0, #7
 80035e8:	1ac2      	subs	r2, r0, r3
 80035ea:	bf1c      	itt	ne
 80035ec:	1a1b      	subne	r3, r3, r0
 80035ee:	50a3      	strne	r3, [r4, r2]
 80035f0:	e7af      	b.n	8003552 <_malloc_r+0x22>
 80035f2:	6862      	ldr	r2, [r4, #4]
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	bf0c      	ite	eq
 80035f8:	f8c8 2000 	streq.w	r2, [r8]
 80035fc:	605a      	strne	r2, [r3, #4]
 80035fe:	e7eb      	b.n	80035d8 <_malloc_r+0xa8>
 8003600:	4623      	mov	r3, r4
 8003602:	6864      	ldr	r4, [r4, #4]
 8003604:	e7ae      	b.n	8003564 <_malloc_r+0x34>
 8003606:	463c      	mov	r4, r7
 8003608:	687f      	ldr	r7, [r7, #4]
 800360a:	e7b6      	b.n	800357a <_malloc_r+0x4a>
 800360c:	461a      	mov	r2, r3
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	42a3      	cmp	r3, r4
 8003612:	d1fb      	bne.n	800360c <_malloc_r+0xdc>
 8003614:	2300      	movs	r3, #0
 8003616:	6053      	str	r3, [r2, #4]
 8003618:	e7de      	b.n	80035d8 <_malloc_r+0xa8>
 800361a:	230c      	movs	r3, #12
 800361c:	6033      	str	r3, [r6, #0]
 800361e:	4630      	mov	r0, r6
 8003620:	f000 f80c 	bl	800363c <__malloc_unlock>
 8003624:	e794      	b.n	8003550 <_malloc_r+0x20>
 8003626:	6005      	str	r5, [r0, #0]
 8003628:	e7d6      	b.n	80035d8 <_malloc_r+0xa8>
 800362a:	bf00      	nop
 800362c:	20000274 	.word	0x20000274

08003630 <__malloc_lock>:
 8003630:	4801      	ldr	r0, [pc, #4]	@ (8003638 <__malloc_lock+0x8>)
 8003632:	f7ff bf0e 	b.w	8003452 <__retarget_lock_acquire_recursive>
 8003636:	bf00      	nop
 8003638:	2000026c 	.word	0x2000026c

0800363c <__malloc_unlock>:
 800363c:	4801      	ldr	r0, [pc, #4]	@ (8003644 <__malloc_unlock+0x8>)
 800363e:	f7ff bf09 	b.w	8003454 <__retarget_lock_release_recursive>
 8003642:	bf00      	nop
 8003644:	2000026c 	.word	0x2000026c

08003648 <__ssputs_r>:
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	688e      	ldr	r6, [r1, #8]
 800364e:	461f      	mov	r7, r3
 8003650:	42be      	cmp	r6, r7
 8003652:	680b      	ldr	r3, [r1, #0]
 8003654:	4682      	mov	sl, r0
 8003656:	460c      	mov	r4, r1
 8003658:	4690      	mov	r8, r2
 800365a:	d82d      	bhi.n	80036b8 <__ssputs_r+0x70>
 800365c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003660:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003664:	d026      	beq.n	80036b4 <__ssputs_r+0x6c>
 8003666:	6965      	ldr	r5, [r4, #20]
 8003668:	6909      	ldr	r1, [r1, #16]
 800366a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800366e:	eba3 0901 	sub.w	r9, r3, r1
 8003672:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003676:	1c7b      	adds	r3, r7, #1
 8003678:	444b      	add	r3, r9
 800367a:	106d      	asrs	r5, r5, #1
 800367c:	429d      	cmp	r5, r3
 800367e:	bf38      	it	cc
 8003680:	461d      	movcc	r5, r3
 8003682:	0553      	lsls	r3, r2, #21
 8003684:	d527      	bpl.n	80036d6 <__ssputs_r+0x8e>
 8003686:	4629      	mov	r1, r5
 8003688:	f7ff ff52 	bl	8003530 <_malloc_r>
 800368c:	4606      	mov	r6, r0
 800368e:	b360      	cbz	r0, 80036ea <__ssputs_r+0xa2>
 8003690:	6921      	ldr	r1, [r4, #16]
 8003692:	464a      	mov	r2, r9
 8003694:	f000 fc16 	bl	8003ec4 <memcpy>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800369e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	6126      	str	r6, [r4, #16]
 80036a6:	6165      	str	r5, [r4, #20]
 80036a8:	444e      	add	r6, r9
 80036aa:	eba5 0509 	sub.w	r5, r5, r9
 80036ae:	6026      	str	r6, [r4, #0]
 80036b0:	60a5      	str	r5, [r4, #8]
 80036b2:	463e      	mov	r6, r7
 80036b4:	42be      	cmp	r6, r7
 80036b6:	d900      	bls.n	80036ba <__ssputs_r+0x72>
 80036b8:	463e      	mov	r6, r7
 80036ba:	6820      	ldr	r0, [r4, #0]
 80036bc:	4632      	mov	r2, r6
 80036be:	4641      	mov	r1, r8
 80036c0:	f000 fbb4 	bl	8003e2c <memmove>
 80036c4:	68a3      	ldr	r3, [r4, #8]
 80036c6:	1b9b      	subs	r3, r3, r6
 80036c8:	60a3      	str	r3, [r4, #8]
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	4433      	add	r3, r6
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	2000      	movs	r0, #0
 80036d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d6:	462a      	mov	r2, r5
 80036d8:	f000 fc02 	bl	8003ee0 <_realloc_r>
 80036dc:	4606      	mov	r6, r0
 80036de:	2800      	cmp	r0, #0
 80036e0:	d1e0      	bne.n	80036a4 <__ssputs_r+0x5c>
 80036e2:	6921      	ldr	r1, [r4, #16]
 80036e4:	4650      	mov	r0, sl
 80036e6:	f7ff feb7 	bl	8003458 <_free_r>
 80036ea:	230c      	movs	r3, #12
 80036ec:	f8ca 3000 	str.w	r3, [sl]
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	e7e9      	b.n	80036d2 <__ssputs_r+0x8a>
	...

08003700 <_svfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	4698      	mov	r8, r3
 8003706:	898b      	ldrh	r3, [r1, #12]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	b09d      	sub	sp, #116	@ 0x74
 800370c:	4607      	mov	r7, r0
 800370e:	460d      	mov	r5, r1
 8003710:	4614      	mov	r4, r2
 8003712:	d510      	bpl.n	8003736 <_svfiprintf_r+0x36>
 8003714:	690b      	ldr	r3, [r1, #16]
 8003716:	b973      	cbnz	r3, 8003736 <_svfiprintf_r+0x36>
 8003718:	2140      	movs	r1, #64	@ 0x40
 800371a:	f7ff ff09 	bl	8003530 <_malloc_r>
 800371e:	6028      	str	r0, [r5, #0]
 8003720:	6128      	str	r0, [r5, #16]
 8003722:	b930      	cbnz	r0, 8003732 <_svfiprintf_r+0x32>
 8003724:	230c      	movs	r3, #12
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	b01d      	add	sp, #116	@ 0x74
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003732:	2340      	movs	r3, #64	@ 0x40
 8003734:	616b      	str	r3, [r5, #20]
 8003736:	2300      	movs	r3, #0
 8003738:	9309      	str	r3, [sp, #36]	@ 0x24
 800373a:	2320      	movs	r3, #32
 800373c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003740:	f8cd 800c 	str.w	r8, [sp, #12]
 8003744:	2330      	movs	r3, #48	@ 0x30
 8003746:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80038e4 <_svfiprintf_r+0x1e4>
 800374a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800374e:	f04f 0901 	mov.w	r9, #1
 8003752:	4623      	mov	r3, r4
 8003754:	469a      	mov	sl, r3
 8003756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800375a:	b10a      	cbz	r2, 8003760 <_svfiprintf_r+0x60>
 800375c:	2a25      	cmp	r2, #37	@ 0x25
 800375e:	d1f9      	bne.n	8003754 <_svfiprintf_r+0x54>
 8003760:	ebba 0b04 	subs.w	fp, sl, r4
 8003764:	d00b      	beq.n	800377e <_svfiprintf_r+0x7e>
 8003766:	465b      	mov	r3, fp
 8003768:	4622      	mov	r2, r4
 800376a:	4629      	mov	r1, r5
 800376c:	4638      	mov	r0, r7
 800376e:	f7ff ff6b 	bl	8003648 <__ssputs_r>
 8003772:	3001      	adds	r0, #1
 8003774:	f000 80a7 	beq.w	80038c6 <_svfiprintf_r+0x1c6>
 8003778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800377a:	445a      	add	r2, fp
 800377c:	9209      	str	r2, [sp, #36]	@ 0x24
 800377e:	f89a 3000 	ldrb.w	r3, [sl]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 809f 	beq.w	80038c6 <_svfiprintf_r+0x1c6>
 8003788:	2300      	movs	r3, #0
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003792:	f10a 0a01 	add.w	sl, sl, #1
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	9307      	str	r3, [sp, #28]
 800379a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800379e:	931a      	str	r3, [sp, #104]	@ 0x68
 80037a0:	4654      	mov	r4, sl
 80037a2:	2205      	movs	r2, #5
 80037a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a8:	484e      	ldr	r0, [pc, #312]	@ (80038e4 <_svfiprintf_r+0x1e4>)
 80037aa:	f7fc fd39 	bl	8000220 <memchr>
 80037ae:	9a04      	ldr	r2, [sp, #16]
 80037b0:	b9d8      	cbnz	r0, 80037ea <_svfiprintf_r+0xea>
 80037b2:	06d0      	lsls	r0, r2, #27
 80037b4:	bf44      	itt	mi
 80037b6:	2320      	movmi	r3, #32
 80037b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037bc:	0711      	lsls	r1, r2, #28
 80037be:	bf44      	itt	mi
 80037c0:	232b      	movmi	r3, #43	@ 0x2b
 80037c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037c6:	f89a 3000 	ldrb.w	r3, [sl]
 80037ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80037cc:	d015      	beq.n	80037fa <_svfiprintf_r+0xfa>
 80037ce:	9a07      	ldr	r2, [sp, #28]
 80037d0:	4654      	mov	r4, sl
 80037d2:	2000      	movs	r0, #0
 80037d4:	f04f 0c0a 	mov.w	ip, #10
 80037d8:	4621      	mov	r1, r4
 80037da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037de:	3b30      	subs	r3, #48	@ 0x30
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	d94b      	bls.n	800387c <_svfiprintf_r+0x17c>
 80037e4:	b1b0      	cbz	r0, 8003814 <_svfiprintf_r+0x114>
 80037e6:	9207      	str	r2, [sp, #28]
 80037e8:	e014      	b.n	8003814 <_svfiprintf_r+0x114>
 80037ea:	eba0 0308 	sub.w	r3, r0, r8
 80037ee:	fa09 f303 	lsl.w	r3, r9, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	9304      	str	r3, [sp, #16]
 80037f6:	46a2      	mov	sl, r4
 80037f8:	e7d2      	b.n	80037a0 <_svfiprintf_r+0xa0>
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	1d19      	adds	r1, r3, #4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	9103      	str	r1, [sp, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfbb      	ittet	lt
 8003806:	425b      	neglt	r3, r3
 8003808:	f042 0202 	orrlt.w	r2, r2, #2
 800380c:	9307      	strge	r3, [sp, #28]
 800380e:	9307      	strlt	r3, [sp, #28]
 8003810:	bfb8      	it	lt
 8003812:	9204      	strlt	r2, [sp, #16]
 8003814:	7823      	ldrb	r3, [r4, #0]
 8003816:	2b2e      	cmp	r3, #46	@ 0x2e
 8003818:	d10a      	bne.n	8003830 <_svfiprintf_r+0x130>
 800381a:	7863      	ldrb	r3, [r4, #1]
 800381c:	2b2a      	cmp	r3, #42	@ 0x2a
 800381e:	d132      	bne.n	8003886 <_svfiprintf_r+0x186>
 8003820:	9b03      	ldr	r3, [sp, #12]
 8003822:	1d1a      	adds	r2, r3, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	9203      	str	r2, [sp, #12]
 8003828:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800382c:	3402      	adds	r4, #2
 800382e:	9305      	str	r3, [sp, #20]
 8003830:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80038f4 <_svfiprintf_r+0x1f4>
 8003834:	7821      	ldrb	r1, [r4, #0]
 8003836:	2203      	movs	r2, #3
 8003838:	4650      	mov	r0, sl
 800383a:	f7fc fcf1 	bl	8000220 <memchr>
 800383e:	b138      	cbz	r0, 8003850 <_svfiprintf_r+0x150>
 8003840:	9b04      	ldr	r3, [sp, #16]
 8003842:	eba0 000a 	sub.w	r0, r0, sl
 8003846:	2240      	movs	r2, #64	@ 0x40
 8003848:	4082      	lsls	r2, r0
 800384a:	4313      	orrs	r3, r2
 800384c:	3401      	adds	r4, #1
 800384e:	9304      	str	r3, [sp, #16]
 8003850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003854:	4824      	ldr	r0, [pc, #144]	@ (80038e8 <_svfiprintf_r+0x1e8>)
 8003856:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800385a:	2206      	movs	r2, #6
 800385c:	f7fc fce0 	bl	8000220 <memchr>
 8003860:	2800      	cmp	r0, #0
 8003862:	d036      	beq.n	80038d2 <_svfiprintf_r+0x1d2>
 8003864:	4b21      	ldr	r3, [pc, #132]	@ (80038ec <_svfiprintf_r+0x1ec>)
 8003866:	bb1b      	cbnz	r3, 80038b0 <_svfiprintf_r+0x1b0>
 8003868:	9b03      	ldr	r3, [sp, #12]
 800386a:	3307      	adds	r3, #7
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	3308      	adds	r3, #8
 8003872:	9303      	str	r3, [sp, #12]
 8003874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003876:	4433      	add	r3, r6
 8003878:	9309      	str	r3, [sp, #36]	@ 0x24
 800387a:	e76a      	b.n	8003752 <_svfiprintf_r+0x52>
 800387c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003880:	460c      	mov	r4, r1
 8003882:	2001      	movs	r0, #1
 8003884:	e7a8      	b.n	80037d8 <_svfiprintf_r+0xd8>
 8003886:	2300      	movs	r3, #0
 8003888:	3401      	adds	r4, #1
 800388a:	9305      	str	r3, [sp, #20]
 800388c:	4619      	mov	r1, r3
 800388e:	f04f 0c0a 	mov.w	ip, #10
 8003892:	4620      	mov	r0, r4
 8003894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003898:	3a30      	subs	r2, #48	@ 0x30
 800389a:	2a09      	cmp	r2, #9
 800389c:	d903      	bls.n	80038a6 <_svfiprintf_r+0x1a6>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0c6      	beq.n	8003830 <_svfiprintf_r+0x130>
 80038a2:	9105      	str	r1, [sp, #20]
 80038a4:	e7c4      	b.n	8003830 <_svfiprintf_r+0x130>
 80038a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038aa:	4604      	mov	r4, r0
 80038ac:	2301      	movs	r3, #1
 80038ae:	e7f0      	b.n	8003892 <_svfiprintf_r+0x192>
 80038b0:	ab03      	add	r3, sp, #12
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	462a      	mov	r2, r5
 80038b6:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <_svfiprintf_r+0x1f0>)
 80038b8:	a904      	add	r1, sp, #16
 80038ba:	4638      	mov	r0, r7
 80038bc:	f3af 8000 	nop.w
 80038c0:	1c42      	adds	r2, r0, #1
 80038c2:	4606      	mov	r6, r0
 80038c4:	d1d6      	bne.n	8003874 <_svfiprintf_r+0x174>
 80038c6:	89ab      	ldrh	r3, [r5, #12]
 80038c8:	065b      	lsls	r3, r3, #25
 80038ca:	f53f af2d 	bmi.w	8003728 <_svfiprintf_r+0x28>
 80038ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038d0:	e72c      	b.n	800372c <_svfiprintf_r+0x2c>
 80038d2:	ab03      	add	r3, sp, #12
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	462a      	mov	r2, r5
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <_svfiprintf_r+0x1f0>)
 80038da:	a904      	add	r1, sp, #16
 80038dc:	4638      	mov	r0, r7
 80038de:	f000 f879 	bl	80039d4 <_printf_i>
 80038e2:	e7ed      	b.n	80038c0 <_svfiprintf_r+0x1c0>
 80038e4:	08003fd8 	.word	0x08003fd8
 80038e8:	08003fe2 	.word	0x08003fe2
 80038ec:	00000000 	.word	0x00000000
 80038f0:	08003649 	.word	0x08003649
 80038f4:	08003fde 	.word	0x08003fde

080038f8 <_printf_common>:
 80038f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	4616      	mov	r6, r2
 80038fe:	4698      	mov	r8, r3
 8003900:	688a      	ldr	r2, [r1, #8]
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003908:	4293      	cmp	r3, r2
 800390a:	bfb8      	it	lt
 800390c:	4613      	movlt	r3, r2
 800390e:	6033      	str	r3, [r6, #0]
 8003910:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003914:	4607      	mov	r7, r0
 8003916:	460c      	mov	r4, r1
 8003918:	b10a      	cbz	r2, 800391e <_printf_common+0x26>
 800391a:	3301      	adds	r3, #1
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	0699      	lsls	r1, r3, #26
 8003922:	bf42      	ittt	mi
 8003924:	6833      	ldrmi	r3, [r6, #0]
 8003926:	3302      	addmi	r3, #2
 8003928:	6033      	strmi	r3, [r6, #0]
 800392a:	6825      	ldr	r5, [r4, #0]
 800392c:	f015 0506 	ands.w	r5, r5, #6
 8003930:	d106      	bne.n	8003940 <_printf_common+0x48>
 8003932:	f104 0a19 	add.w	sl, r4, #25
 8003936:	68e3      	ldr	r3, [r4, #12]
 8003938:	6832      	ldr	r2, [r6, #0]
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	42ab      	cmp	r3, r5
 800393e:	dc26      	bgt.n	800398e <_printf_common+0x96>
 8003940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	3b00      	subs	r3, #0
 8003948:	bf18      	it	ne
 800394a:	2301      	movne	r3, #1
 800394c:	0692      	lsls	r2, r2, #26
 800394e:	d42b      	bmi.n	80039a8 <_printf_common+0xb0>
 8003950:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003954:	4641      	mov	r1, r8
 8003956:	4638      	mov	r0, r7
 8003958:	47c8      	blx	r9
 800395a:	3001      	adds	r0, #1
 800395c:	d01e      	beq.n	800399c <_printf_common+0xa4>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	f003 0306 	and.w	r3, r3, #6
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf02      	ittt	eq
 800396a:	68e5      	ldreq	r5, [r4, #12]
 800396c:	6833      	ldreq	r3, [r6, #0]
 800396e:	1aed      	subeq	r5, r5, r3
 8003970:	68a3      	ldr	r3, [r4, #8]
 8003972:	bf0c      	ite	eq
 8003974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003978:	2500      	movne	r5, #0
 800397a:	4293      	cmp	r3, r2
 800397c:	bfc4      	itt	gt
 800397e:	1a9b      	subgt	r3, r3, r2
 8003980:	18ed      	addgt	r5, r5, r3
 8003982:	2600      	movs	r6, #0
 8003984:	341a      	adds	r4, #26
 8003986:	42b5      	cmp	r5, r6
 8003988:	d11a      	bne.n	80039c0 <_printf_common+0xc8>
 800398a:	2000      	movs	r0, #0
 800398c:	e008      	b.n	80039a0 <_printf_common+0xa8>
 800398e:	2301      	movs	r3, #1
 8003990:	4652      	mov	r2, sl
 8003992:	4641      	mov	r1, r8
 8003994:	4638      	mov	r0, r7
 8003996:	47c8      	blx	r9
 8003998:	3001      	adds	r0, #1
 800399a:	d103      	bne.n	80039a4 <_printf_common+0xac>
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a4:	3501      	adds	r5, #1
 80039a6:	e7c6      	b.n	8003936 <_printf_common+0x3e>
 80039a8:	18e1      	adds	r1, r4, r3
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	2030      	movs	r0, #48	@ 0x30
 80039ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039b2:	4422      	add	r2, r4
 80039b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039bc:	3302      	adds	r3, #2
 80039be:	e7c7      	b.n	8003950 <_printf_common+0x58>
 80039c0:	2301      	movs	r3, #1
 80039c2:	4622      	mov	r2, r4
 80039c4:	4641      	mov	r1, r8
 80039c6:	4638      	mov	r0, r7
 80039c8:	47c8      	blx	r9
 80039ca:	3001      	adds	r0, #1
 80039cc:	d0e6      	beq.n	800399c <_printf_common+0xa4>
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7d9      	b.n	8003986 <_printf_common+0x8e>
	...

080039d4 <_printf_i>:
 80039d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	7e0f      	ldrb	r7, [r1, #24]
 80039da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039dc:	2f78      	cmp	r7, #120	@ 0x78
 80039de:	4691      	mov	r9, r2
 80039e0:	4680      	mov	r8, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	469a      	mov	sl, r3
 80039e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039ea:	d807      	bhi.n	80039fc <_printf_i+0x28>
 80039ec:	2f62      	cmp	r7, #98	@ 0x62
 80039ee:	d80a      	bhi.n	8003a06 <_printf_i+0x32>
 80039f0:	2f00      	cmp	r7, #0
 80039f2:	f000 80d1 	beq.w	8003b98 <_printf_i+0x1c4>
 80039f6:	2f58      	cmp	r7, #88	@ 0x58
 80039f8:	f000 80b8 	beq.w	8003b6c <_printf_i+0x198>
 80039fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a04:	e03a      	b.n	8003a7c <_printf_i+0xa8>
 8003a06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a0a:	2b15      	cmp	r3, #21
 8003a0c:	d8f6      	bhi.n	80039fc <_printf_i+0x28>
 8003a0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003a14 <_printf_i+0x40>)
 8003a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a81 	.word	0x08003a81
 8003a1c:	080039fd 	.word	0x080039fd
 8003a20:	080039fd 	.word	0x080039fd
 8003a24:	080039fd 	.word	0x080039fd
 8003a28:	080039fd 	.word	0x080039fd
 8003a2c:	08003a81 	.word	0x08003a81
 8003a30:	080039fd 	.word	0x080039fd
 8003a34:	080039fd 	.word	0x080039fd
 8003a38:	080039fd 	.word	0x080039fd
 8003a3c:	080039fd 	.word	0x080039fd
 8003a40:	08003b7f 	.word	0x08003b7f
 8003a44:	08003aab 	.word	0x08003aab
 8003a48:	08003b39 	.word	0x08003b39
 8003a4c:	080039fd 	.word	0x080039fd
 8003a50:	080039fd 	.word	0x080039fd
 8003a54:	08003ba1 	.word	0x08003ba1
 8003a58:	080039fd 	.word	0x080039fd
 8003a5c:	08003aab 	.word	0x08003aab
 8003a60:	080039fd 	.word	0x080039fd
 8003a64:	080039fd 	.word	0x080039fd
 8003a68:	08003b41 	.word	0x08003b41
 8003a6c:	6833      	ldr	r3, [r6, #0]
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6032      	str	r2, [r6, #0]
 8003a74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e09c      	b.n	8003bba <_printf_i+0x1e6>
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	1d19      	adds	r1, r3, #4
 8003a86:	6031      	str	r1, [r6, #0]
 8003a88:	0606      	lsls	r6, r0, #24
 8003a8a:	d501      	bpl.n	8003a90 <_printf_i+0xbc>
 8003a8c:	681d      	ldr	r5, [r3, #0]
 8003a8e:	e003      	b.n	8003a98 <_printf_i+0xc4>
 8003a90:	0645      	lsls	r5, r0, #25
 8003a92:	d5fb      	bpl.n	8003a8c <_printf_i+0xb8>
 8003a94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a98:	2d00      	cmp	r5, #0
 8003a9a:	da03      	bge.n	8003aa4 <_printf_i+0xd0>
 8003a9c:	232d      	movs	r3, #45	@ 0x2d
 8003a9e:	426d      	negs	r5, r5
 8003aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aa4:	4858      	ldr	r0, [pc, #352]	@ (8003c08 <_printf_i+0x234>)
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	e011      	b.n	8003ace <_printf_i+0xfa>
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	6833      	ldr	r3, [r6, #0]
 8003aae:	0608      	lsls	r0, r1, #24
 8003ab0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ab4:	d402      	bmi.n	8003abc <_printf_i+0xe8>
 8003ab6:	0649      	lsls	r1, r1, #25
 8003ab8:	bf48      	it	mi
 8003aba:	b2ad      	uxthmi	r5, r5
 8003abc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003abe:	4852      	ldr	r0, [pc, #328]	@ (8003c08 <_printf_i+0x234>)
 8003ac0:	6033      	str	r3, [r6, #0]
 8003ac2:	bf14      	ite	ne
 8003ac4:	230a      	movne	r3, #10
 8003ac6:	2308      	moveq	r3, #8
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ace:	6866      	ldr	r6, [r4, #4]
 8003ad0:	60a6      	str	r6, [r4, #8]
 8003ad2:	2e00      	cmp	r6, #0
 8003ad4:	db05      	blt.n	8003ae2 <_printf_i+0x10e>
 8003ad6:	6821      	ldr	r1, [r4, #0]
 8003ad8:	432e      	orrs	r6, r5
 8003ada:	f021 0104 	bic.w	r1, r1, #4
 8003ade:	6021      	str	r1, [r4, #0]
 8003ae0:	d04b      	beq.n	8003b7a <_printf_i+0x1a6>
 8003ae2:	4616      	mov	r6, r2
 8003ae4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ae8:	fb03 5711 	mls	r7, r3, r1, r5
 8003aec:	5dc7      	ldrb	r7, [r0, r7]
 8003aee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003af2:	462f      	mov	r7, r5
 8003af4:	42bb      	cmp	r3, r7
 8003af6:	460d      	mov	r5, r1
 8003af8:	d9f4      	bls.n	8003ae4 <_printf_i+0x110>
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d10b      	bne.n	8003b16 <_printf_i+0x142>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	07df      	lsls	r7, r3, #31
 8003b02:	d508      	bpl.n	8003b16 <_printf_i+0x142>
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	6861      	ldr	r1, [r4, #4]
 8003b08:	4299      	cmp	r1, r3
 8003b0a:	bfde      	ittt	le
 8003b0c:	2330      	movle	r3, #48	@ 0x30
 8003b0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b16:	1b92      	subs	r2, r2, r6
 8003b18:	6122      	str	r2, [r4, #16]
 8003b1a:	f8cd a000 	str.w	sl, [sp]
 8003b1e:	464b      	mov	r3, r9
 8003b20:	aa03      	add	r2, sp, #12
 8003b22:	4621      	mov	r1, r4
 8003b24:	4640      	mov	r0, r8
 8003b26:	f7ff fee7 	bl	80038f8 <_printf_common>
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d14a      	bne.n	8003bc4 <_printf_i+0x1f0>
 8003b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b32:	b004      	add	sp, #16
 8003b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	f043 0320 	orr.w	r3, r3, #32
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	4832      	ldr	r0, [pc, #200]	@ (8003c0c <_printf_i+0x238>)
 8003b42:	2778      	movs	r7, #120	@ 0x78
 8003b44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	6831      	ldr	r1, [r6, #0]
 8003b4c:	061f      	lsls	r7, r3, #24
 8003b4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b52:	d402      	bmi.n	8003b5a <_printf_i+0x186>
 8003b54:	065f      	lsls	r7, r3, #25
 8003b56:	bf48      	it	mi
 8003b58:	b2ad      	uxthmi	r5, r5
 8003b5a:	6031      	str	r1, [r6, #0]
 8003b5c:	07d9      	lsls	r1, r3, #31
 8003b5e:	bf44      	itt	mi
 8003b60:	f043 0320 	orrmi.w	r3, r3, #32
 8003b64:	6023      	strmi	r3, [r4, #0]
 8003b66:	b11d      	cbz	r5, 8003b70 <_printf_i+0x19c>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	e7ad      	b.n	8003ac8 <_printf_i+0xf4>
 8003b6c:	4826      	ldr	r0, [pc, #152]	@ (8003c08 <_printf_i+0x234>)
 8003b6e:	e7e9      	b.n	8003b44 <_printf_i+0x170>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f023 0320 	bic.w	r3, r3, #32
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	e7f6      	b.n	8003b68 <_printf_i+0x194>
 8003b7a:	4616      	mov	r6, r2
 8003b7c:	e7bd      	b.n	8003afa <_printf_i+0x126>
 8003b7e:	6833      	ldr	r3, [r6, #0]
 8003b80:	6825      	ldr	r5, [r4, #0]
 8003b82:	6961      	ldr	r1, [r4, #20]
 8003b84:	1d18      	adds	r0, r3, #4
 8003b86:	6030      	str	r0, [r6, #0]
 8003b88:	062e      	lsls	r6, r5, #24
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	d501      	bpl.n	8003b92 <_printf_i+0x1be>
 8003b8e:	6019      	str	r1, [r3, #0]
 8003b90:	e002      	b.n	8003b98 <_printf_i+0x1c4>
 8003b92:	0668      	lsls	r0, r5, #25
 8003b94:	d5fb      	bpl.n	8003b8e <_printf_i+0x1ba>
 8003b96:	8019      	strh	r1, [r3, #0]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	4616      	mov	r6, r2
 8003b9e:	e7bc      	b.n	8003b1a <_printf_i+0x146>
 8003ba0:	6833      	ldr	r3, [r6, #0]
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	6032      	str	r2, [r6, #0]
 8003ba6:	681e      	ldr	r6, [r3, #0]
 8003ba8:	6862      	ldr	r2, [r4, #4]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7fc fb37 	bl	8000220 <memchr>
 8003bb2:	b108      	cbz	r0, 8003bb8 <_printf_i+0x1e4>
 8003bb4:	1b80      	subs	r0, r0, r6
 8003bb6:	6060      	str	r0, [r4, #4]
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	6123      	str	r3, [r4, #16]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bc2:	e7aa      	b.n	8003b1a <_printf_i+0x146>
 8003bc4:	6923      	ldr	r3, [r4, #16]
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	4649      	mov	r1, r9
 8003bca:	4640      	mov	r0, r8
 8003bcc:	47d0      	blx	sl
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d0ad      	beq.n	8003b2e <_printf_i+0x15a>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	079b      	lsls	r3, r3, #30
 8003bd6:	d413      	bmi.n	8003c00 <_printf_i+0x22c>
 8003bd8:	68e0      	ldr	r0, [r4, #12]
 8003bda:	9b03      	ldr	r3, [sp, #12]
 8003bdc:	4298      	cmp	r0, r3
 8003bde:	bfb8      	it	lt
 8003be0:	4618      	movlt	r0, r3
 8003be2:	e7a6      	b.n	8003b32 <_printf_i+0x15e>
 8003be4:	2301      	movs	r3, #1
 8003be6:	4632      	mov	r2, r6
 8003be8:	4649      	mov	r1, r9
 8003bea:	4640      	mov	r0, r8
 8003bec:	47d0      	blx	sl
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d09d      	beq.n	8003b2e <_printf_i+0x15a>
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	68e3      	ldr	r3, [r4, #12]
 8003bf6:	9903      	ldr	r1, [sp, #12]
 8003bf8:	1a5b      	subs	r3, r3, r1
 8003bfa:	42ab      	cmp	r3, r5
 8003bfc:	dcf2      	bgt.n	8003be4 <_printf_i+0x210>
 8003bfe:	e7eb      	b.n	8003bd8 <_printf_i+0x204>
 8003c00:	2500      	movs	r5, #0
 8003c02:	f104 0619 	add.w	r6, r4, #25
 8003c06:	e7f5      	b.n	8003bf4 <_printf_i+0x220>
 8003c08:	08003fe9 	.word	0x08003fe9
 8003c0c:	08003ffa 	.word	0x08003ffa

08003c10 <__sflush_r>:
 8003c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c18:	0716      	lsls	r6, r2, #28
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	d454      	bmi.n	8003cca <__sflush_r+0xba>
 8003c20:	684b      	ldr	r3, [r1, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dc02      	bgt.n	8003c2c <__sflush_r+0x1c>
 8003c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	dd48      	ble.n	8003cbe <__sflush_r+0xae>
 8003c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	d045      	beq.n	8003cbe <__sflush_r+0xae>
 8003c32:	2300      	movs	r3, #0
 8003c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c38:	682f      	ldr	r7, [r5, #0]
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	d030      	beq.n	8003ca2 <__sflush_r+0x92>
 8003c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	0759      	lsls	r1, r3, #29
 8003c46:	d505      	bpl.n	8003c54 <__sflush_r+0x44>
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c4e:	b10b      	cbz	r3, 8003c54 <__sflush_r+0x44>
 8003c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c52:	1ad2      	subs	r2, r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c58:	6a21      	ldr	r1, [r4, #32]
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	47b0      	blx	r6
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	d106      	bne.n	8003c72 <__sflush_r+0x62>
 8003c64:	6829      	ldr	r1, [r5, #0]
 8003c66:	291d      	cmp	r1, #29
 8003c68:	d82b      	bhi.n	8003cc2 <__sflush_r+0xb2>
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <__sflush_r+0x104>)
 8003c6c:	40ca      	lsrs	r2, r1
 8003c6e:	07d6      	lsls	r6, r2, #31
 8003c70:	d527      	bpl.n	8003cc2 <__sflush_r+0xb2>
 8003c72:	2200      	movs	r2, #0
 8003c74:	6062      	str	r2, [r4, #4]
 8003c76:	04d9      	lsls	r1, r3, #19
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	6022      	str	r2, [r4, #0]
 8003c7c:	d504      	bpl.n	8003c88 <__sflush_r+0x78>
 8003c7e:	1c42      	adds	r2, r0, #1
 8003c80:	d101      	bne.n	8003c86 <__sflush_r+0x76>
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	b903      	cbnz	r3, 8003c88 <__sflush_r+0x78>
 8003c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c8a:	602f      	str	r7, [r5, #0]
 8003c8c:	b1b9      	cbz	r1, 8003cbe <__sflush_r+0xae>
 8003c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c92:	4299      	cmp	r1, r3
 8003c94:	d002      	beq.n	8003c9c <__sflush_r+0x8c>
 8003c96:	4628      	mov	r0, r5
 8003c98:	f7ff fbde 	bl	8003458 <_free_r>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ca0:	e00d      	b.n	8003cbe <__sflush_r+0xae>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b0      	blx	r6
 8003ca8:	4602      	mov	r2, r0
 8003caa:	1c50      	adds	r0, r2, #1
 8003cac:	d1c9      	bne.n	8003c42 <__sflush_r+0x32>
 8003cae:	682b      	ldr	r3, [r5, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0c6      	beq.n	8003c42 <__sflush_r+0x32>
 8003cb4:	2b1d      	cmp	r3, #29
 8003cb6:	d001      	beq.n	8003cbc <__sflush_r+0xac>
 8003cb8:	2b16      	cmp	r3, #22
 8003cba:	d11e      	bne.n	8003cfa <__sflush_r+0xea>
 8003cbc:	602f      	str	r7, [r5, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e022      	b.n	8003d08 <__sflush_r+0xf8>
 8003cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	e01b      	b.n	8003d02 <__sflush_r+0xf2>
 8003cca:	690f      	ldr	r7, [r1, #16]
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	d0f6      	beq.n	8003cbe <__sflush_r+0xae>
 8003cd0:	0793      	lsls	r3, r2, #30
 8003cd2:	680e      	ldr	r6, [r1, #0]
 8003cd4:	bf08      	it	eq
 8003cd6:	694b      	ldreq	r3, [r1, #20]
 8003cd8:	600f      	str	r7, [r1, #0]
 8003cda:	bf18      	it	ne
 8003cdc:	2300      	movne	r3, #0
 8003cde:	eba6 0807 	sub.w	r8, r6, r7
 8003ce2:	608b      	str	r3, [r1, #8]
 8003ce4:	f1b8 0f00 	cmp.w	r8, #0
 8003ce8:	dde9      	ble.n	8003cbe <__sflush_r+0xae>
 8003cea:	6a21      	ldr	r1, [r4, #32]
 8003cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003cee:	4643      	mov	r3, r8
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	47b0      	blx	r6
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	dc08      	bgt.n	8003d0c <__sflush_r+0xfc>
 8003cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d0c:	4407      	add	r7, r0
 8003d0e:	eba8 0800 	sub.w	r8, r8, r0
 8003d12:	e7e7      	b.n	8003ce4 <__sflush_r+0xd4>
 8003d14:	20400001 	.word	0x20400001

08003d18 <_fflush_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4605      	mov	r5, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	b913      	cbnz	r3, 8003d28 <_fflush_r+0x10>
 8003d22:	2500      	movs	r5, #0
 8003d24:	4628      	mov	r0, r5
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	b118      	cbz	r0, 8003d32 <_fflush_r+0x1a>
 8003d2a:	6a03      	ldr	r3, [r0, #32]
 8003d2c:	b90b      	cbnz	r3, 8003d32 <_fflush_r+0x1a>
 8003d2e:	f7ff f975 	bl	800301c <__sinit>
 8003d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f3      	beq.n	8003d22 <_fflush_r+0xa>
 8003d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d3c:	07d0      	lsls	r0, r2, #31
 8003d3e:	d404      	bmi.n	8003d4a <_fflush_r+0x32>
 8003d40:	0599      	lsls	r1, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_fflush_r+0x32>
 8003d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d46:	f7ff fb84 	bl	8003452 <__retarget_lock_acquire_recursive>
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	f7ff ff5f 	bl	8003c10 <__sflush_r>
 8003d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d54:	07da      	lsls	r2, r3, #31
 8003d56:	4605      	mov	r5, r0
 8003d58:	d4e4      	bmi.n	8003d24 <_fflush_r+0xc>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	059b      	lsls	r3, r3, #22
 8003d5e:	d4e1      	bmi.n	8003d24 <_fflush_r+0xc>
 8003d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d62:	f7ff fb77 	bl	8003454 <__retarget_lock_release_recursive>
 8003d66:	e7dd      	b.n	8003d24 <_fflush_r+0xc>

08003d68 <__swhatbuf_r>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d70:	2900      	cmp	r1, #0
 8003d72:	b096      	sub	sp, #88	@ 0x58
 8003d74:	4615      	mov	r5, r2
 8003d76:	461e      	mov	r6, r3
 8003d78:	da0d      	bge.n	8003d96 <__swhatbuf_r+0x2e>
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	bf14      	ite	ne
 8003d86:	2340      	movne	r3, #64	@ 0x40
 8003d88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	6031      	str	r1, [r6, #0]
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	b016      	add	sp, #88	@ 0x58
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	466a      	mov	r2, sp
 8003d98:	f000 f862 	bl	8003e60 <_fstat_r>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	dbec      	blt.n	8003d7a <__swhatbuf_r+0x12>
 8003da0:	9901      	ldr	r1, [sp, #4]
 8003da2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003da6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003daa:	4259      	negs	r1, r3
 8003dac:	4159      	adcs	r1, r3
 8003dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003db2:	e7eb      	b.n	8003d8c <__swhatbuf_r+0x24>

08003db4 <__smakebuf_r>:
 8003db4:	898b      	ldrh	r3, [r1, #12]
 8003db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003db8:	079d      	lsls	r5, r3, #30
 8003dba:	4606      	mov	r6, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	d507      	bpl.n	8003dd0 <__smakebuf_r+0x1c>
 8003dc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	6123      	str	r3, [r4, #16]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	6163      	str	r3, [r4, #20]
 8003dcc:	b003      	add	sp, #12
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	ab01      	add	r3, sp, #4
 8003dd2:	466a      	mov	r2, sp
 8003dd4:	f7ff ffc8 	bl	8003d68 <__swhatbuf_r>
 8003dd8:	9f00      	ldr	r7, [sp, #0]
 8003dda:	4605      	mov	r5, r0
 8003ddc:	4639      	mov	r1, r7
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff fba6 	bl	8003530 <_malloc_r>
 8003de4:	b948      	cbnz	r0, 8003dfa <__smakebuf_r+0x46>
 8003de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dea:	059a      	lsls	r2, r3, #22
 8003dec:	d4ee      	bmi.n	8003dcc <__smakebuf_r+0x18>
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	81a3      	strh	r3, [r4, #12]
 8003df8:	e7e2      	b.n	8003dc0 <__smakebuf_r+0xc>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	6020      	str	r0, [r4, #0]
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	9b01      	ldr	r3, [sp, #4]
 8003e06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e0a:	b15b      	cbz	r3, 8003e24 <__smakebuf_r+0x70>
 8003e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e10:	4630      	mov	r0, r6
 8003e12:	f000 f837 	bl	8003e84 <_isatty_r>
 8003e16:	b128      	cbz	r0, 8003e24 <__smakebuf_r+0x70>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	431d      	orrs	r5, r3
 8003e28:	81a5      	strh	r5, [r4, #12]
 8003e2a:	e7cf      	b.n	8003dcc <__smakebuf_r+0x18>

08003e2c <memmove>:
 8003e2c:	4288      	cmp	r0, r1
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	eb01 0402 	add.w	r4, r1, r2
 8003e34:	d902      	bls.n	8003e3c <memmove+0x10>
 8003e36:	4284      	cmp	r4, r0
 8003e38:	4623      	mov	r3, r4
 8003e3a:	d807      	bhi.n	8003e4c <memmove+0x20>
 8003e3c:	1e43      	subs	r3, r0, #1
 8003e3e:	42a1      	cmp	r1, r4
 8003e40:	d008      	beq.n	8003e54 <memmove+0x28>
 8003e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e4a:	e7f8      	b.n	8003e3e <memmove+0x12>
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4601      	mov	r1, r0
 8003e50:	428a      	cmp	r2, r1
 8003e52:	d100      	bne.n	8003e56 <memmove+0x2a>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e5e:	e7f7      	b.n	8003e50 <memmove+0x24>

08003e60 <_fstat_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d07      	ldr	r5, [pc, #28]	@ (8003e80 <_fstat_r+0x20>)
 8003e64:	2300      	movs	r3, #0
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	f7fc fe89 	bl	8000b84 <_fstat>
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	d102      	bne.n	8003e7c <_fstat_r+0x1c>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	b103      	cbz	r3, 8003e7c <_fstat_r+0x1c>
 8003e7a:	6023      	str	r3, [r4, #0]
 8003e7c:	bd38      	pop	{r3, r4, r5, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000268 	.word	0x20000268

08003e84 <_isatty_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4d06      	ldr	r5, [pc, #24]	@ (8003ea0 <_isatty_r+0x1c>)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	602b      	str	r3, [r5, #0]
 8003e90:	f7fc fe88 	bl	8000ba4 <_isatty>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_isatty_r+0x1a>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_isatty_r+0x1a>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000268 	.word	0x20000268

08003ea4 <_sbrk_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d06      	ldr	r5, [pc, #24]	@ (8003ec0 <_sbrk_r+0x1c>)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4608      	mov	r0, r1
 8003eae:	602b      	str	r3, [r5, #0]
 8003eb0:	f7fc fe90 	bl	8000bd4 <_sbrk>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_sbrk_r+0x1a>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_sbrk_r+0x1a>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	20000268 	.word	0x20000268

08003ec4 <memcpy>:
 8003ec4:	440a      	add	r2, r1
 8003ec6:	4291      	cmp	r1, r2
 8003ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ecc:	d100      	bne.n	8003ed0 <memcpy+0xc>
 8003ece:	4770      	bx	lr
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eda:	4291      	cmp	r1, r2
 8003edc:	d1f9      	bne.n	8003ed2 <memcpy+0xe>
 8003ede:	bd10      	pop	{r4, pc}

08003ee0 <_realloc_r>:
 8003ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	460d      	mov	r5, r1
 8003eea:	b921      	cbnz	r1, 8003ef6 <_realloc_r+0x16>
 8003eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	f7ff bb1d 	b.w	8003530 <_malloc_r>
 8003ef6:	b92a      	cbnz	r2, 8003f04 <_realloc_r+0x24>
 8003ef8:	f7ff faae 	bl	8003458 <_free_r>
 8003efc:	4625      	mov	r5, r4
 8003efe:	4628      	mov	r0, r5
 8003f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f04:	f000 f81a 	bl	8003f3c <_malloc_usable_size_r>
 8003f08:	4284      	cmp	r4, r0
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	d802      	bhi.n	8003f14 <_realloc_r+0x34>
 8003f0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f12:	d8f4      	bhi.n	8003efe <_realloc_r+0x1e>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4638      	mov	r0, r7
 8003f18:	f7ff fb0a 	bl	8003530 <_malloc_r>
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	b908      	cbnz	r0, 8003f24 <_realloc_r+0x44>
 8003f20:	4645      	mov	r5, r8
 8003f22:	e7ec      	b.n	8003efe <_realloc_r+0x1e>
 8003f24:	42b4      	cmp	r4, r6
 8003f26:	4622      	mov	r2, r4
 8003f28:	4629      	mov	r1, r5
 8003f2a:	bf28      	it	cs
 8003f2c:	4632      	movcs	r2, r6
 8003f2e:	f7ff ffc9 	bl	8003ec4 <memcpy>
 8003f32:	4629      	mov	r1, r5
 8003f34:	4638      	mov	r0, r7
 8003f36:	f7ff fa8f 	bl	8003458 <_free_r>
 8003f3a:	e7f1      	b.n	8003f20 <_realloc_r+0x40>

08003f3c <_malloc_usable_size_r>:
 8003f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f40:	1f18      	subs	r0, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bfbc      	itt	lt
 8003f46:	580b      	ldrlt	r3, [r1, r0]
 8003f48:	18c0      	addlt	r0, r0, r3
 8003f4a:	4770      	bx	lr

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
